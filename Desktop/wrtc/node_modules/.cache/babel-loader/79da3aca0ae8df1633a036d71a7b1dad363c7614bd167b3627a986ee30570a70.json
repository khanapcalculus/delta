{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eniac\\\\Desktop\\\\wrtc\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState } from 'react';\nimport './App.css';\nimport ConnectionPanel from './components/ConnectionPanel';\nimport PageManager from './components/PageManager';\nimport Toolbar from './components/Toolbar';\nimport Whiteboard from './components/Whiteboard';\nimport WebRTCManager from './services/WebRTCManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionId, setConnectionId] = useState('');\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [strokeWidth, setStrokeWidth] = useState(2);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [drawingData, setDrawingData] = useState([[]]);\n  const webrtcManagerRef = useRef(null);\n  const handleConnection = useCallback(async (roomId, isHost) => {\n    try {\n      if (!webrtcManagerRef.current) {\n        webrtcManagerRef.current = new WebRTCManager();\n      }\n      webrtcManagerRef.current.onDataReceived = data => {\n        handleRemoteDrawing(data);\n      };\n      webrtcManagerRef.current.onConnectionStateChange = connected => {\n        setIsConnected(connected);\n      };\n      await webrtcManagerRef.current.initialize(roomId, isHost);\n      setConnectionId(roomId);\n    } catch (error) {\n      console.error('Connection failed:', error);\n      alert('Failed to establish connection');\n    }\n  }, []);\n  const handleRemoteDrawing = data => {\n    if (data.type === 'drawing') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        while (newData.length <= data.page) {\n          newData.push([]);\n        }\n        newData[data.page] = [...newData[data.page], data.stroke];\n        return newData;\n      });\n    } else if (data.type === 'clear') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        if (newData[data.page]) {\n          newData[data.page] = [];\n        }\n        return newData;\n      });\n    } else if (data.type === 'pageChange') {\n      setTotalPages(Math.max(totalPages, data.totalPages));\n    }\n  };\n  const handleLocalDrawing = stroke => {\n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'drawing',\n        stroke: stroke,\n        page: currentPage\n      });\n    }\n    setDrawingData(prev => {\n      const newData = [...prev];\n      while (newData.length <= currentPage) {\n        newData.push([]);\n      }\n      newData[currentPage] = [...newData[currentPage], stroke];\n      return newData;\n    });\n  };\n  const handleClearPage = () => {\n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'clear',\n        page: currentPage\n      });\n    }\n    setDrawingData(prev => {\n      const newData = [...prev];\n      if (newData[currentPage]) {\n        newData[currentPage] = [];\n      }\n      return newData;\n    });\n  };\n  const handlePageChange = pageIndex => {\n    setCurrentPage(pageIndex);\n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'pageChange',\n        page: pageIndex,\n        totalPages: Math.max(totalPages, pageIndex + 1)\n      });\n    }\n  };\n  const addNewPage = () => {\n    const newPageIndex = totalPages;\n    setTotalPages(prev => prev + 1);\n    setDrawingData(prev => [...prev, []]);\n    setCurrentPage(newPageIndex);\n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'pageChange',\n        page: newPageIndex,\n        totalPages: totalPages + 1\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WebRTC Whiteboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: isConnected ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"connected\",\n          children: [\"Connected - Room: \", connectionId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"disconnected\",\n          children: \"Not Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), !isConnected ? /*#__PURE__*/_jsxDEV(ConnectionPanel, {\n      onConnect: handleConnection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n          currentTool: currentTool,\n          setCurrentTool: setCurrentTool,\n          currentColor: currentColor,\n          setCurrentColor: setCurrentColor,\n          strokeWidth: strokeWidth,\n          setStrokeWidth: setStrokeWidth,\n          onClear: handleClearPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PageManager, {\n          currentPage: currentPage,\n          totalPages: totalPages,\n          onPageChange: handlePageChange,\n          onAddPage: addNewPage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Whiteboard, {\n        tool: currentTool,\n        color: currentColor,\n        strokeWidth: strokeWidth,\n        onDrawing: handleLocalDrawing,\n        drawingData: drawingData[currentPage] || []\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KJjP0/JBnxYEhSSWPJU1sQS3wfw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useRef","useState","ConnectionPanel","PageManager","Toolbar","Whiteboard","WebRTCManager","jsxDEV","_jsxDEV","App","_s","isConnected","setIsConnected","connectionId","setConnectionId","currentTool","setCurrentTool","currentColor","setCurrentColor","strokeWidth","setStrokeWidth","currentPage","setCurrentPage","totalPages","setTotalPages","drawingData","setDrawingData","webrtcManagerRef","handleConnection","roomId","isHost","current","onDataReceived","data","handleRemoteDrawing","onConnectionStateChange","connected","initialize","error","console","alert","type","prev","newData","length","page","push","stroke","Math","max","handleLocalDrawing","sendData","handleClearPage","handlePageChange","pageIndex","addNewPage","newPageIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onConnect","onClear","onPageChange","onAddPage","tool","color","onDrawing","_c","$RefreshReg$"],"sources":["C:/Users/eniac/Desktop/wrtc/src/App.js"],"sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\nimport './App.css';\nimport ConnectionPanel from './components/ConnectionPanel';\nimport PageManager from './components/PageManager';\nimport Toolbar from './components/Toolbar';\nimport Whiteboard from './components/Whiteboard';\nimport WebRTCManager from './services/WebRTCManager';\n\nfunction App() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionId, setConnectionId] = useState('');\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [strokeWidth, setStrokeWidth] = useState(2);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [drawingData, setDrawingData] = useState([[]]);\n  \n  const webrtcManagerRef = useRef(null);\n\n  const handleConnection = useCallback(async (roomId, isHost) => {\n    try {\n      if (!webrtcManagerRef.current) {\n        webrtcManagerRef.current = new WebRTCManager();\n      }\n      \n      webrtcManagerRef.current.onDataReceived = (data) => {\n        handleRemoteDrawing(data);\n      };\n      \n      webrtcManagerRef.current.onConnectionStateChange = (connected) => {\n        setIsConnected(connected);\n      };\n      \n      await webrtcManagerRef.current.initialize(roomId, isHost);\n      setConnectionId(roomId);\n    } catch (error) {\n      console.error('Connection failed:', error);\n      alert('Failed to establish connection');\n    }\n  }, []);\n\n  const handleRemoteDrawing = (data) => {\n    if (data.type === 'drawing') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        while (newData.length <= data.page) {\n          newData.push([]);\n        }\n        newData[data.page] = [...newData[data.page], data.stroke];\n        return newData;\n      });\n    } else if (data.type === 'clear') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        if (newData[data.page]) {\n          newData[data.page] = [];\n        }\n        return newData;\n      });\n    } else if (data.type === 'pageChange') {\n      setTotalPages(Math.max(totalPages, data.totalPages));\n    }\n  };\n\n  const handleLocalDrawing = (stroke) => {\n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'drawing',\n        stroke: stroke,\n        page: currentPage\n      });\n    }\n    \n    setDrawingData(prev => {\n      const newData = [...prev];\n      while (newData.length <= currentPage) {\n        newData.push([]);\n      }\n      newData[currentPage] = [...newData[currentPage], stroke];\n      return newData;\n    });\n  };\n\n  const handleClearPage = () => {\n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'clear',\n        page: currentPage\n      });\n    }\n    \n    setDrawingData(prev => {\n      const newData = [...prev];\n      if (newData[currentPage]) {\n        newData[currentPage] = [];\n      }\n      return newData;\n    });\n  };\n\n  const handlePageChange = (pageIndex) => {\n    setCurrentPage(pageIndex);\n    \n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'pageChange',\n        page: pageIndex,\n        totalPages: Math.max(totalPages, pageIndex + 1)\n      });\n    }\n  };\n\n  const addNewPage = () => {\n    const newPageIndex = totalPages;\n    setTotalPages(prev => prev + 1);\n    setDrawingData(prev => [...prev, []]);\n    setCurrentPage(newPageIndex);\n    \n    if (webrtcManagerRef.current && isConnected) {\n      webrtcManagerRef.current.sendData({\n        type: 'pageChange',\n        page: newPageIndex,\n        totalPages: totalPages + 1\n      });\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <h1>WebRTC Whiteboard</h1>\n        <div className=\"connection-status\">\n          {isConnected ? (\n            <span className=\"connected\">Connected - Room: {connectionId}</span>\n          ) : (\n            <span className=\"disconnected\">Not Connected</span>\n          )}\n        </div>\n      </header>\n      \n      {!isConnected ? (\n        <ConnectionPanel onConnect={handleConnection} />\n      ) : (\n        <div className=\"whiteboard-container\">\n          <div className=\"controls\">\n            <Toolbar\n              currentTool={currentTool}\n              setCurrentTool={setCurrentTool}\n              currentColor={currentColor}\n              setCurrentColor={setCurrentColor}\n              strokeWidth={strokeWidth}\n              setStrokeWidth={setStrokeWidth}\n              onClear={handleClearPage}\n            />\n            <PageManager\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={handlePageChange}\n              onAddPage={addNewPage}\n            />\n          </div>\n          \n          <Whiteboard\n            tool={currentTool}\n            color={currentColor}\n            strokeWidth={strokeWidth}\n            onDrawing={handleLocalDrawing}\n            drawingData={drawingData[currentPage] || []}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC5D,OAAO,WAAW;AAClB,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,aAAa,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,SAAS,CAAC;EAC3D,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAEpD,MAAM0B,gBAAgB,GAAG3B,MAAM,CAAC,IAAI,CAAC;EAErC,MAAM4B,gBAAgB,GAAG7B,WAAW,CAAC,OAAO8B,MAAM,EAAEC,MAAM,KAAK;IAC7D,IAAI;MACF,IAAI,CAACH,gBAAgB,CAACI,OAAO,EAAE;QAC7BJ,gBAAgB,CAACI,OAAO,GAAG,IAAIzB,aAAa,CAAC,CAAC;MAChD;MAEAqB,gBAAgB,CAACI,OAAO,CAACC,cAAc,GAAIC,IAAI,IAAK;QAClDC,mBAAmB,CAACD,IAAI,CAAC;MAC3B,CAAC;MAEDN,gBAAgB,CAACI,OAAO,CAACI,uBAAuB,GAAIC,SAAS,IAAK;QAChExB,cAAc,CAACwB,SAAS,CAAC;MAC3B,CAAC;MAED,MAAMT,gBAAgB,CAACI,OAAO,CAACM,UAAU,CAACR,MAAM,EAAEC,MAAM,CAAC;MACzDhB,eAAe,CAACe,MAAM,CAAC;IACzB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CE,KAAK,CAAC,gCAAgC,CAAC;IACzC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMN,mBAAmB,GAAID,IAAI,IAAK;IACpC,IAAIA,IAAI,CAACQ,IAAI,KAAK,SAAS,EAAE;MAC3Bf,cAAc,CAACgB,IAAI,IAAI;QACrB,MAAMC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;QACzB,OAAOC,OAAO,CAACC,MAAM,IAAIX,IAAI,CAACY,IAAI,EAAE;UAClCF,OAAO,CAACG,IAAI,CAAC,EAAE,CAAC;QAClB;QACAH,OAAO,CAACV,IAAI,CAACY,IAAI,CAAC,GAAG,CAAC,GAAGF,OAAO,CAACV,IAAI,CAACY,IAAI,CAAC,EAAEZ,IAAI,CAACc,MAAM,CAAC;QACzD,OAAOJ,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIV,IAAI,CAACQ,IAAI,KAAK,OAAO,EAAE;MAChCf,cAAc,CAACgB,IAAI,IAAI;QACrB,MAAMC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;QACzB,IAAIC,OAAO,CAACV,IAAI,CAACY,IAAI,CAAC,EAAE;UACtBF,OAAO,CAACV,IAAI,CAACY,IAAI,CAAC,GAAG,EAAE;QACzB;QACA,OAAOF,OAAO;MAChB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIV,IAAI,CAACQ,IAAI,KAAK,YAAY,EAAE;MACrCjB,aAAa,CAACwB,IAAI,CAACC,GAAG,CAAC1B,UAAU,EAAEU,IAAI,CAACV,UAAU,CAAC,CAAC;IACtD;EACF,CAAC;EAED,MAAM2B,kBAAkB,GAAIH,MAAM,IAAK;IACrC,IAAIpB,gBAAgB,CAACI,OAAO,IAAIpB,WAAW,EAAE;MAC3CgB,gBAAgB,CAACI,OAAO,CAACoB,QAAQ,CAAC;QAChCV,IAAI,EAAE,SAAS;QACfM,MAAM,EAAEA,MAAM;QACdF,IAAI,EAAExB;MACR,CAAC,CAAC;IACJ;IAEAK,cAAc,CAACgB,IAAI,IAAI;MACrB,MAAMC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;MACzB,OAAOC,OAAO,CAACC,MAAM,IAAIvB,WAAW,EAAE;QACpCsB,OAAO,CAACG,IAAI,CAAC,EAAE,CAAC;MAClB;MACAH,OAAO,CAACtB,WAAW,CAAC,GAAG,CAAC,GAAGsB,OAAO,CAACtB,WAAW,CAAC,EAAE0B,MAAM,CAAC;MACxD,OAAOJ,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIzB,gBAAgB,CAACI,OAAO,IAAIpB,WAAW,EAAE;MAC3CgB,gBAAgB,CAACI,OAAO,CAACoB,QAAQ,CAAC;QAChCV,IAAI,EAAE,OAAO;QACbI,IAAI,EAAExB;MACR,CAAC,CAAC;IACJ;IAEAK,cAAc,CAACgB,IAAI,IAAI;MACrB,MAAMC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;MACzB,IAAIC,OAAO,CAACtB,WAAW,CAAC,EAAE;QACxBsB,OAAO,CAACtB,WAAW,CAAC,GAAG,EAAE;MAC3B;MACA,OAAOsB,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMU,gBAAgB,GAAIC,SAAS,IAAK;IACtChC,cAAc,CAACgC,SAAS,CAAC;IAEzB,IAAI3B,gBAAgB,CAACI,OAAO,IAAIpB,WAAW,EAAE;MAC3CgB,gBAAgB,CAACI,OAAO,CAACoB,QAAQ,CAAC;QAChCV,IAAI,EAAE,YAAY;QAClBI,IAAI,EAAES,SAAS;QACf/B,UAAU,EAAEyB,IAAI,CAACC,GAAG,CAAC1B,UAAU,EAAE+B,SAAS,GAAG,CAAC;MAChD,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,YAAY,GAAGjC,UAAU;IAC/BC,aAAa,CAACkB,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;IAC/BhB,cAAc,CAACgB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE,EAAE,CAAC,CAAC;IACrCpB,cAAc,CAACkC,YAAY,CAAC;IAE5B,IAAI7B,gBAAgB,CAACI,OAAO,IAAIpB,WAAW,EAAE;MAC3CgB,gBAAgB,CAACI,OAAO,CAACoB,QAAQ,CAAC;QAChCV,IAAI,EAAE,YAAY;QAClBI,IAAI,EAAEW,YAAY;QAClBjC,UAAU,EAAEA,UAAU,GAAG;MAC3B,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACEf,OAAA;IAAKiD,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlD,OAAA;MAAQiD,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BlD,OAAA;QAAAkD,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BtD,OAAA;QAAKiD,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC/B/C,WAAW,gBACVH,OAAA;UAAMiD,SAAS,EAAC,WAAW;UAAAC,QAAA,GAAC,oBAAkB,EAAC7C,YAAY;QAAA;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,gBAEnEtD,OAAA;UAAMiD,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MACnD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EAER,CAACnD,WAAW,gBACXH,OAAA,CAACN,eAAe;MAAC6D,SAAS,EAAEnC;IAAiB;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEhDtD,OAAA;MAAKiD,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACnClD,OAAA;QAAKiD,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvBlD,OAAA,CAACJ,OAAO;UACNW,WAAW,EAAEA,WAAY;UACzBC,cAAc,EAAEA,cAAe;UAC/BC,YAAY,EAAEA,YAAa;UAC3BC,eAAe,EAAEA,eAAgB;UACjCC,WAAW,EAAEA,WAAY;UACzBC,cAAc,EAAEA,cAAe;UAC/B4C,OAAO,EAAEZ;QAAgB;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACFtD,OAAA,CAACL,WAAW;UACVkB,WAAW,EAAEA,WAAY;UACzBE,UAAU,EAAEA,UAAW;UACvB0C,YAAY,EAAEZ,gBAAiB;UAC/Ba,SAAS,EAAEX;QAAW;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENtD,OAAA,CAACH,UAAU;QACT8D,IAAI,EAAEpD,WAAY;QAClBqD,KAAK,EAAEnD,YAAa;QACpBE,WAAW,EAAEA,WAAY;QACzBkD,SAAS,EAAEnB,kBAAmB;QAC9BzB,WAAW,EAAEA,WAAW,CAACJ,WAAW,CAAC,IAAI;MAAG;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACpD,EAAA,CAtKQD,GAAG;AAAA6D,EAAA,GAAH7D,GAAG;AAwKZ,eAAeA,GAAG;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}