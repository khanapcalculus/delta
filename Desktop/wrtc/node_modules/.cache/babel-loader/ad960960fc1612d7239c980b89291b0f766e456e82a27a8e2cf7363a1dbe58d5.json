{"ast":null,"code":"class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    this.answerPolling = null;\n    this.offerPolling = null;\n\n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [{\n      urls: 'stun:stun.l.google.com:19302'\n    }, {\n      urls: 'stun:stun1.l.google.com:19302'\n    }, {\n      urls: 'stun:stun2.l.google.com:19302'\n    }];\n  }\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n    console.log(`üöÄ Initializing WebRTC - Room: ${roomId}, Role: ${isHost ? 'HOST' : 'GUEST'}`);\n    console.log('üåê Current origin:', window.location.origin);\n\n    // Clear any existing data for this room first\n    this.cleanup();\n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('üîÑ Connection state changed:', this.localConnection.connectionState);\n        switch (this.localConnection.connectionState) {\n          case 'connected':\n            console.log('üéâ PEER CONNECTION ESTABLISHED!');\n            break;\n          case 'disconnected':\n            console.log('‚ö†Ô∏è Peer connection disconnected');\n            break;\n          case 'failed':\n            console.log('‚ùå Peer connection failed');\n            break;\n          case 'closed':\n            console.log('üîí Peer connection closed');\n            break;\n        }\n      };\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('üßä ICE connection state changed:', this.localConnection.iceConnectionState);\n        switch (this.localConnection.iceConnectionState) {\n          case 'checking':\n            console.log('üîç ICE checking connectivity...');\n            break;\n          case 'connected':\n            console.log('‚úÖ ICE connected successfully!');\n            break;\n          case 'completed':\n            console.log('üéØ ICE connection completed!');\n            break;\n          case 'failed':\n            console.log('‚ùå ICE connection failed');\n            break;\n          case 'disconnected':\n            console.log('‚ö†Ô∏è ICE disconnected');\n            break;\n          case 'closed':\n            console.log('üîí ICE connection closed');\n            break;\n        }\n      };\n      this.localConnection.onsignalingstatechange = () => {\n        console.log('üì° Signaling state changed:', this.localConnection.signalingState);\n      };\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('‚ùå WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n\n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,\n      // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    console.log('üì° Data channel created by host:', {\n      label: this.dataChannel.label,\n      readyState: this.dataChannel.readyState,\n      id: this.dataChannel.id\n    });\n    this.setupDataChannel(this.dataChannel);\n\n    // Monitor data channel state changes\n    this.dataChannel.addEventListener('statechange', () => {\n      console.log('üîÑ Host data channel state changed:', this.dataChannel.readyState);\n    });\n\n    // Handle ICE candidates\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('üßä Host ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('‚úÖ Host ICE gathering complete');\n      }\n    };\n\n    // Create offer\n    console.log('üìù Creating offer...');\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n\n    // Store offer in localStorage with multiple methods\n    const offerData = {\n      offer: offer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n\n    // Method 1: Standard localStorage\n    const offerKey = `offer_${this.roomId}`;\n    localStorage.setItem(offerKey, JSON.stringify(offerData));\n\n    // Method 2: Force localStorage sync with storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: offerKey,\n      newValue: JSON.stringify(offerData),\n      url: window.location.href\n    }));\n\n    // Method 3: Also store in global variable for same-page access\n    window.webrtcOffers = window.webrtcOffers || {};\n    window.webrtcOffers[this.roomId] = offerData;\n    console.log('üíæ Offer stored with multiple methods:', offerData);\n    console.log('üîç Verifying storage immediately:');\n    console.log('  - localStorage:', localStorage.getItem(offerKey));\n    console.log('  - window.webrtcOffers:', window.webrtcOffers[this.roomId]);\n\n    // Populate manual signaling field\n    setTimeout(() => {\n      const offerTextarea = document.getElementById('offerData');\n      if (offerTextarea) {\n        offerTextarea.value = JSON.stringify(offerData);\n        console.log('üìù Populated manual offer textarea');\n      }\n    }, 500);\n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('‚è≥ Waiting for answer...');\n\n    // Listen for answer\n    this.waitForAnswer();\n  }\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n\n    // Handle ICE candidates\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('üßä Guest ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('‚úÖ Guest ICE gathering complete');\n      }\n    };\n\n    // Wait for offer\n    console.log('üîç Looking for offer...');\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    console.log('üì• Offer received, setting as remote description...');\n    console.log('üìã Current signaling state:', this.localConnection.signalingState);\n    try {\n      await this.localConnection.setRemoteDescription(offerData.offer);\n      console.log('‚úÖ Remote description (offer) set successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to set remote description (offer):', error);\n      throw error;\n    }\n\n    // Listen for data channel from host\n    this.localConnection.ondatachannel = event => {\n      console.log('üì° Data channel received from host');\n      console.log('üìã Data channel details:', {\n        label: event.channel.label,\n        readyState: event.channel.readyState,\n        id: event.channel.id\n      });\n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n\n      // Force connection state check after receiving data channel\n      setTimeout(() => {\n        var _this$dataChannel;\n        console.log('üîç Connection state after data channel setup:');\n        console.log('  - Connection state:', this.localConnection.connectionState);\n        console.log('  - ICE connection state:', this.localConnection.iceConnectionState);\n        console.log('  - Data channel state:', (_this$dataChannel = this.dataChannel) === null || _this$dataChannel === void 0 ? void 0 : _this$dataChannel.readyState);\n        console.log('  - Signaling state:', this.localConnection.signalingState);\n      }, 500);\n    };\n\n    // Create answer\n    console.log('üìù Creating answer...');\n    const answer = await this.localConnection.createAnswer();\n    console.log('üí° Answer created:', answer);\n    await this.localConnection.setLocalDescription(answer);\n    console.log('‚úÖ Local description (answer) set successfully');\n\n    // Store answer using multiple methods\n    const answerData = {\n      type: 'answer',\n      sdp: answer.sdp\n    };\n    localStorage.setItem(`answer_${this.roomId}`, JSON.stringify(answerData));\n\n    // Global variable fallback\n    window.webrtcAnswers = window.webrtcAnswers || {};\n    window.webrtcAnswers[this.roomId] = answerData;\n    console.log('üíæ Answer stored with multiple methods');\n\n    // Auto-populate the answer textarea for manual copy/paste\n    setTimeout(() => {\n      const answerTextarea = document.getElementById('answerData');\n      if (answerTextarea) {\n        answerTextarea.value = JSON.stringify(answerData);\n        console.log('üìù Auto-populated answer textarea');\n      }\n    }, 100);\n    console.log('‚úÖ Guest setup complete');\n\n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    channel.onopen = () => {\n      console.log('üéâ DATA CHANNEL OPENED - CONNECTION ESTABLISHED!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    channel.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® Data received:', data.type);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('‚ùå Failed to parse received data:', error);\n      }\n    };\n    channel.onerror = error => {\n      console.error('‚ùå Data channel error:', error);\n    };\n  }\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 30;\n      this.offerPolling = setInterval(() => {\n        attempts++;\n        console.log(`üîç Looking for offer... attempt ${attempts}/${maxAttempts}`);\n\n        // Debug: Show all localStorage keys and global variables\n        const allKeys = Object.keys(localStorage);\n        const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n        console.log('üì¶ All localStorage keys:', allKeys.length);\n        console.log('üì¶ Room-specific keys:', roomKeys);\n        console.log('üåê Global offers:', window.webrtcOffers);\n\n        // Try multiple methods to find the offer\n        let offerData = null;\n\n        // Method 1: localStorage\n        const localStorageOffer = localStorage.getItem(`offer_${this.roomId}`);\n        if (localStorageOffer) {\n          console.log('‚úÖ Found offer in localStorage');\n          offerData = localStorageOffer;\n        }\n\n        // Method 2: Global variable\n        if (!offerData && window.webrtcOffers && window.webrtcOffers[this.roomId]) {\n          console.log('‚úÖ Found offer in global variable');\n          offerData = JSON.stringify(window.webrtcOffers[this.roomId]);\n        }\n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            console.log('üìÑ Found offer data:', parsed);\n\n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              clearInterval(this.offerPolling);\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n              if (window.webrtcOffers) {\n                delete window.webrtcOffers[this.roomId];\n              }\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to parse offer:', error);\n          }\n        } else {\n          console.log('‚ùå No offer found with any method');\n        }\n        if (attempts >= maxAttempts) {\n          clearInterval(this.offerPolling);\n          reject(new Error('Timeout waiting for offer'));\n        }\n      }, 1000);\n    });\n  }\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 30;\n    this.answerPolling = setInterval(async () => {\n      attempts++;\n      console.log(`üîç Looking for answer... attempt ${attempts}/${maxAttempts}`);\n\n      // Debug: Show localStorage and global variables\n      const allKeys = Object.keys(localStorage);\n      const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n      console.log('üì¶ Room-specific keys:', roomKeys);\n      console.log('üåê Global answers:', window.webrtcAnswers);\n\n      // Try multiple methods to find the answer\n      let answerData = null;\n\n      // Method 1: localStorage\n      const localStorageAnswer = localStorage.getItem(`answer_${this.roomId}`);\n      if (localStorageAnswer) {\n        console.log('‚úÖ Found answer in localStorage');\n        answerData = localStorageAnswer;\n      }\n\n      // Method 2: Global variable\n      if (!answerData && window.webrtcAnswers && window.webrtcAnswers[this.roomId]) {\n        console.log('‚úÖ Found answer in global variable');\n        answerData = JSON.stringify(window.webrtcAnswers[this.roomId]);\n      }\n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n          console.log('üìÑ Found answer data:', parsed);\n\n          // Check connection state before setting remote description\n          console.log('üìã Current signaling state:', this.localConnection.signalingState);\n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting as remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            clearInterval(this.answerPolling);\n            this.answerProcessed = true;\n\n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            console.log('‚úÖ Remote description (answer) set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Wrong signaling state for answer:', this.localConnection.signalingState);\n          }\n        } catch (error) {\n          console.error('‚ùå Failed to set remote description (answer):', error);\n          clearInterval(this.answerPolling);\n        }\n      } else {\n        console.log('‚ùå No answer found with any method');\n      }\n      if (attempts >= maxAttempts) {\n        clearInterval(this.answerPolling);\n        console.error('‚ùå Timeout waiting for answer');\n      }\n    }, 1000);\n  }\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n    console.log(`üíæ Stored ICE candidate for ${role}`);\n\n    // Update manual ICE fields\n    this.updateManualIceFields(role);\n  }\n  updateManualIceFields(role) {\n    setTimeout(() => {\n      const key = `ice_${this.roomId}_${role}`;\n      const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n      if (role === 'host') {\n        const hostTextarea = document.getElementById('hostIceCandidates');\n        if (hostTextarea && candidates.length > 0) {\n          hostTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated host ICE textarea with ${candidates.length} candidates`);\n        }\n      } else if (role === 'guest') {\n        const guestTextarea = document.getElementById('guestIceCandidates');\n        if (guestTextarea && candidates.length > 0) {\n          guestTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated guest ICE textarea with ${candidates.length} candidates`);\n        }\n      }\n    }, 100);\n  }\n  async processStoredIceCandidates(role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n\n    // Check connection state after processing ICE candidates\n    setTimeout(() => {\n      var _this$dataChannel2;\n      console.log('üîç Current connection states:');\n      console.log('  - Connection state:', this.localConnection.connectionState);\n      console.log('  - ICE connection state:', this.localConnection.iceConnectionState);\n      console.log('  - Data channel state:', (_this$dataChannel2 = this.dataChannel) === null || _this$dataChannel2 === void 0 ? void 0 : _this$dataChannel2.readyState);\n    }, 2000);\n  }\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('‚ùå Failed to send data:', error);\n      }\n    } else {\n      var _this$dataChannel3;\n      console.warn('‚ö†Ô∏è Data channel not ready, state:', ((_this$dataChannel3 = this.dataChannel) === null || _this$dataChannel3 === void 0 ? void 0 : _this$dataChannel3.readyState) || 'null');\n    }\n  }\n  cleanup() {\n    if (this.roomId) {\n      const keys = [`offer_${this.roomId}`, `answer_${this.roomId}`, `ice_${this.roomId}_host`, `ice_${this.roomId}_guest`];\n      keys.forEach(key => localStorage.removeItem(key));\n\n      // Clean global variables too\n      if (window.webrtcOffers) {\n        delete window.webrtcOffers[this.roomId];\n      }\n      if (window.webrtcAnswers) {\n        delete window.webrtcAnswers[this.roomId];\n      }\n      console.log('üßπ Cleaned up localStorage and global variables for room:', this.roomId);\n    }\n  }\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n\n    // Clear polling intervals\n    if (this.answerPolling) {\n      clearInterval(this.answerPolling);\n      this.answerPolling = null;\n    }\n    if (this.offerPolling) {\n      clearInterval(this.offerPolling);\n      this.offerPolling = null;\n    }\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\nexport default WebRTCManager;","map":{"version":3,"names":["WebRTCManager","constructor","localConnection","dataChannel","isHost","roomId","onDataReceived","onConnectionStateChange","isConnected","answerProcessed","offerProcessed","answerPolling","offerPolling","iceServers","urls","initialize","console","log","window","location","origin","cleanup","RTCPeerConnection","iceCandidatePoolSize","bundlePolicy","rtcpMuxPolicy","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","onsignalingstatechange","signalingState","setupAsHost","setupAsGuest","error","createDataChannel","ordered","maxRetransmits","label","readyState","id","setupDataChannel","addEventListener","onicecandidate","event","candidate","storeIceCandidate","offer","createOffer","setLocalDescription","offerData","timestamp","Date","now","offerKey","localStorage","setItem","JSON","stringify","dispatchEvent","StorageEvent","key","newValue","url","href","webrtcOffers","getItem","setTimeout","offerTextarea","document","getElementById","value","waitForAnswer","waitForOffer","Error","setRemoteDescription","ondatachannel","channel","_this$dataChannel","answer","createAnswer","answerData","type","sdp","webrtcAnswers","answerTextarea","processStoredIceCandidates","onopen","onclose","onmessage","data","parse","onerror","Promise","resolve","reject","attempts","maxAttempts","setInterval","allKeys","Object","keys","roomKeys","filter","k","includes","length","localStorageOffer","parsed","clearInterval","removeItem","localStorageAnswer","role","existing","push","updateManualIceFields","candidates","hostTextarea","guestTextarea","candidateData","addIceCandidate","_this$dataChannel2","sendData","send","_this$dataChannel3","warn","forEach","disconnect","close"],"sources":["C:/Users/eniac/Desktop/wrtc/src/services/WebRTCManager.js"],"sourcesContent":["class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    this.answerPolling = null;\n    this.offerPolling = null;\n    \n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [\n      { urls: 'stun:stun.l.google.com:19302' },\n      { urls: 'stun:stun1.l.google.com:19302' },\n      { urls: 'stun:stun2.l.google.com:19302' }\n    ];\n  }\n\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n    \n    console.log(`üöÄ Initializing WebRTC - Room: ${roomId}, Role: ${isHost ? 'HOST' : 'GUEST'}`);\n    console.log('üåê Current origin:', window.location.origin);\n    \n    // Clear any existing data for this room first\n    this.cleanup();\n    \n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('üîÑ Connection state changed:', this.localConnection.connectionState);\n        \n        switch(this.localConnection.connectionState) {\n          case 'connected':\n            console.log('üéâ PEER CONNECTION ESTABLISHED!');\n            break;\n          case 'disconnected':\n            console.log('‚ö†Ô∏è Peer connection disconnected');\n            break;\n          case 'failed':\n            console.log('‚ùå Peer connection failed');\n            break;\n          case 'closed':\n            console.log('üîí Peer connection closed');\n            break;\n        }\n      };\n\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('üßä ICE connection state changed:', this.localConnection.iceConnectionState);\n        \n        switch(this.localConnection.iceConnectionState) {\n          case 'checking':\n            console.log('üîç ICE checking connectivity...');\n            break;\n          case 'connected':\n            console.log('‚úÖ ICE connected successfully!');\n            break;\n          case 'completed':\n            console.log('üéØ ICE connection completed!');\n            break;\n          case 'failed':\n            console.log('‚ùå ICE connection failed');\n            break;\n          case 'disconnected':\n            console.log('‚ö†Ô∏è ICE disconnected');\n            break;\n          case 'closed':\n            console.log('üîí ICE connection closed');\n            break;\n        }\n      };\n\n      this.localConnection.onsignalingstatechange = () => {\n        console.log('üì° Signaling state changed:', this.localConnection.signalingState);\n      };\n\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('‚ùå WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n    \n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,  // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    \n    console.log('üì° Data channel created by host:', {\n      label: this.dataChannel.label,\n      readyState: this.dataChannel.readyState,\n      id: this.dataChannel.id\n    });\n    \n    this.setupDataChannel(this.dataChannel);\n    \n    // Monitor data channel state changes\n    this.dataChannel.addEventListener('statechange', () => {\n      console.log('üîÑ Host data channel state changed:', this.dataChannel.readyState);\n    });\n    \n    // Handle ICE candidates\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('üßä Host ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('‚úÖ Host ICE gathering complete');\n      }\n    };\n    \n    // Create offer\n    console.log('üìù Creating offer...');\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n    \n    // Store offer in localStorage with multiple methods\n    const offerData = {\n      offer: offer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n    \n    // Method 1: Standard localStorage\n    const offerKey = `offer_${this.roomId}`;\n    localStorage.setItem(offerKey, JSON.stringify(offerData));\n    \n    // Method 2: Force localStorage sync with storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: offerKey,\n      newValue: JSON.stringify(offerData),\n      url: window.location.href\n    }));\n    \n    // Method 3: Also store in global variable for same-page access\n    window.webrtcOffers = window.webrtcOffers || {};\n    window.webrtcOffers[this.roomId] = offerData;\n    \n    console.log('üíæ Offer stored with multiple methods:', offerData);\n    console.log('üîç Verifying storage immediately:');\n    console.log('  - localStorage:', localStorage.getItem(offerKey));\n    console.log('  - window.webrtcOffers:', window.webrtcOffers[this.roomId]);\n    \n    // Populate manual signaling field\n    setTimeout(() => {\n      const offerTextarea = document.getElementById('offerData');\n      if (offerTextarea) {\n        offerTextarea.value = JSON.stringify(offerData);\n        console.log('üìù Populated manual offer textarea');\n      }\n    }, 500);\n    \n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('‚è≥ Waiting for answer...');\n    \n    // Listen for answer\n    this.waitForAnswer();\n  }\n\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n    \n    // Handle ICE candidates\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('üßä Guest ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('‚úÖ Guest ICE gathering complete');\n      }\n    };\n    \n    // Wait for offer\n    console.log('üîç Looking for offer...');\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    \n    console.log('üì• Offer received, setting as remote description...');\n    console.log('üìã Current signaling state:', this.localConnection.signalingState);\n    \n    try {\n      await this.localConnection.setRemoteDescription(offerData.offer);\n      console.log('‚úÖ Remote description (offer) set successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to set remote description (offer):', error);\n      throw error;\n    }\n    \n    // Listen for data channel from host\n    this.localConnection.ondatachannel = (event) => {\n      console.log('üì° Data channel received from host');\n      console.log('üìã Data channel details:', {\n        label: event.channel.label,\n        readyState: event.channel.readyState,\n        id: event.channel.id\n      });\n      \n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n      \n      // Force connection state check after receiving data channel\n      setTimeout(() => {\n        console.log('üîç Connection state after data channel setup:');\n        console.log('  - Connection state:', this.localConnection.connectionState);\n        console.log('  - ICE connection state:', this.localConnection.iceConnectionState);\n        console.log('  - Data channel state:', this.dataChannel?.readyState);\n        console.log('  - Signaling state:', this.localConnection.signalingState);\n      }, 500);\n    };\n    \n    // Create answer\n    console.log('üìù Creating answer...');\n    const answer = await this.localConnection.createAnswer();\n    console.log('üí° Answer created:', answer);\n    \n    await this.localConnection.setLocalDescription(answer);\n    console.log('‚úÖ Local description (answer) set successfully');\n    \n    // Store answer using multiple methods\n    const answerData = { type: 'answer', sdp: answer.sdp };\n    localStorage.setItem(`answer_${this.roomId}`, JSON.stringify(answerData));\n    \n    // Global variable fallback\n    window.webrtcAnswers = window.webrtcAnswers || {};\n    window.webrtcAnswers[this.roomId] = answerData;\n    \n    console.log('üíæ Answer stored with multiple methods');\n    \n    // Auto-populate the answer textarea for manual copy/paste\n    setTimeout(() => {\n      const answerTextarea = document.getElementById('answerData');\n      if (answerTextarea) {\n        answerTextarea.value = JSON.stringify(answerData);\n        console.log('üìù Auto-populated answer textarea');\n      }\n    }, 100);\n    \n    console.log('‚úÖ Guest setup complete');\n    \n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    \n    channel.onopen = () => {\n      console.log('üéâ DATA CHANNEL OPENED - CONNECTION ESTABLISHED!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    \n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    \n    channel.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® Data received:', data.type);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('‚ùå Failed to parse received data:', error);\n      }\n    };\n    \n    channel.onerror = (error) => {\n      console.error('‚ùå Data channel error:', error);\n    };\n  }\n\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 30;\n      \n      this.offerPolling = setInterval(() => {\n        attempts++;\n        console.log(`üîç Looking for offer... attempt ${attempts}/${maxAttempts}`);\n        \n        // Debug: Show all localStorage keys and global variables\n        const allKeys = Object.keys(localStorage);\n        const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n        console.log('üì¶ All localStorage keys:', allKeys.length);\n        console.log('üì¶ Room-specific keys:', roomKeys);\n        console.log('üåê Global offers:', window.webrtcOffers);\n        \n        // Try multiple methods to find the offer\n        let offerData = null;\n        \n        // Method 1: localStorage\n        const localStorageOffer = localStorage.getItem(`offer_${this.roomId}`);\n        if (localStorageOffer) {\n          console.log('‚úÖ Found offer in localStorage');\n          offerData = localStorageOffer;\n        }\n        \n        // Method 2: Global variable\n        if (!offerData && window.webrtcOffers && window.webrtcOffers[this.roomId]) {\n          console.log('‚úÖ Found offer in global variable');\n          offerData = JSON.stringify(window.webrtcOffers[this.roomId]);\n        }\n        \n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            console.log('üìÑ Found offer data:', parsed);\n            \n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              clearInterval(this.offerPolling);\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n              if (window.webrtcOffers) {\n                delete window.webrtcOffers[this.roomId];\n              }\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to parse offer:', error);\n          }\n        } else {\n          console.log('‚ùå No offer found with any method');\n        }\n        \n        if (attempts >= maxAttempts) {\n          clearInterval(this.offerPolling);\n          reject(new Error('Timeout waiting for offer'));\n        }\n      }, 1000);\n    });\n  }\n\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 30;\n    \n    this.answerPolling = setInterval(async () => {\n      attempts++;\n      console.log(`üîç Looking for answer... attempt ${attempts}/${maxAttempts}`);\n      \n      // Debug: Show localStorage and global variables\n      const allKeys = Object.keys(localStorage);\n      const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n      console.log('üì¶ Room-specific keys:', roomKeys);\n      console.log('üåê Global answers:', window.webrtcAnswers);\n      \n      // Try multiple methods to find the answer\n      let answerData = null;\n      \n      // Method 1: localStorage\n      const localStorageAnswer = localStorage.getItem(`answer_${this.roomId}`);\n      if (localStorageAnswer) {\n        console.log('‚úÖ Found answer in localStorage');\n        answerData = localStorageAnswer;\n      }\n      \n      // Method 2: Global variable\n      if (!answerData && window.webrtcAnswers && window.webrtcAnswers[this.roomId]) {\n        console.log('‚úÖ Found answer in global variable');\n        answerData = JSON.stringify(window.webrtcAnswers[this.roomId]);\n      }\n      \n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n          console.log('üìÑ Found answer data:', parsed);\n          \n          // Check connection state before setting remote description\n          console.log('üìã Current signaling state:', this.localConnection.signalingState);\n          \n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting as remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            \n            clearInterval(this.answerPolling);\n            this.answerProcessed = true;\n            \n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            \n            console.log('‚úÖ Remote description (answer) set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Wrong signaling state for answer:', this.localConnection.signalingState);\n          }\n        } catch (error) {\n          console.error('‚ùå Failed to set remote description (answer):', error);\n          clearInterval(this.answerPolling);\n        }\n      } else {\n        console.log('‚ùå No answer found with any method');\n      }\n      \n      if (attempts >= maxAttempts) {\n        clearInterval(this.answerPolling);\n        console.error('‚ùå Timeout waiting for answer');\n      }\n    }, 1000);\n  }\n\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n    console.log(`üíæ Stored ICE candidate for ${role}`);\n    \n    // Update manual ICE fields\n    this.updateManualIceFields(role);\n  }\n\n  updateManualIceFields(role) {\n    setTimeout(() => {\n      const key = `ice_${this.roomId}_${role}`;\n      const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n      \n      if (role === 'host') {\n        const hostTextarea = document.getElementById('hostIceCandidates');\n        if (hostTextarea && candidates.length > 0) {\n          hostTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated host ICE textarea with ${candidates.length} candidates`);\n        }\n      } else if (role === 'guest') {\n        const guestTextarea = document.getElementById('guestIceCandidates');\n        if (guestTextarea && candidates.length > 0) {\n          guestTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated guest ICE textarea with ${candidates.length} candidates`);\n        }\n      }\n    }, 100);\n  }\n\n  async processStoredIceCandidates(role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    \n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    \n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n    \n    // Check connection state after processing ICE candidates\n    setTimeout(() => {\n      console.log('üîç Current connection states:');\n      console.log('  - Connection state:', this.localConnection.connectionState);\n      console.log('  - ICE connection state:', this.localConnection.iceConnectionState);\n      console.log('  - Data channel state:', this.dataChannel?.readyState);\n    }, 2000);\n  }\n\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('‚ùå Failed to send data:', error);\n      }\n    } else {\n      console.warn('‚ö†Ô∏è Data channel not ready, state:', this.dataChannel?.readyState || 'null');\n    }\n  }\n\n  cleanup() {\n    if (this.roomId) {\n      const keys = [`offer_${this.roomId}`, `answer_${this.roomId}`, `ice_${this.roomId}_host`, `ice_${this.roomId}_guest`];\n      keys.forEach(key => localStorage.removeItem(key));\n      \n      // Clean global variables too\n      if (window.webrtcOffers) {\n        delete window.webrtcOffers[this.roomId];\n      }\n      if (window.webrtcAnswers) {\n        delete window.webrtcAnswers[this.roomId];\n      }\n      \n      console.log('üßπ Cleaned up localStorage and global variables for room:', this.roomId);\n    }\n  }\n\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n    \n    // Clear polling intervals\n    if (this.answerPolling) {\n      clearInterval(this.answerPolling);\n      this.answerPolling = null;\n    }\n    if (this.offerPolling) {\n      clearInterval(this.offerPolling);\n      this.offerPolling = null;\n    }\n    \n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    \n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    \n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\n\nexport default WebRTCManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}