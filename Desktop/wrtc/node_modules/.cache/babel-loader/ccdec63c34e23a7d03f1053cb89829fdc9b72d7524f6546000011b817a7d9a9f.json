{"ast":null,"code":"import { io } from 'socket.io-client';\nclass WebRTCManager {\n  constructor() {\n    this.peerConnection = null;\n    this.dataChannel = null;\n    this.socket = null;\n    this.roomId = null;\n    this.isHost = false;\n    this.onConnectionStateChange = null;\n    this.onDataReceived = null;\n    this.onDebugLog = null;\n    this.connectionTimeout = null;\n\n    // WebRTC configuration with STUN servers\n    this.config = {\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }, {\n        urls: 'stun:stun1.l.google.com:19302'\n      }, {\n        urls: 'stun:stun2.l.google.com:19302'\n      }],\n      iceCandidatePoolSize: 10\n    };\n  }\n\n  // Connect to signaling server\n  connectToSignalingServer() {\n    this.debugLog('üîó Connecting to signaling server...');\n    this.socket = io('http://localhost:3001', {\n      transports: ['websocket', 'polling']\n    });\n    this.socket.on('connect', () => {\n      this.debugLog('‚úÖ Connected to signaling server');\n    });\n    this.socket.on('disconnect', () => {\n      this.debugLog('‚ùå Disconnected from signaling server');\n    });\n    this.socket.on('connect_error', error => {\n      this.debugLog(`‚ùå Connection error: ${error.message}`);\n    });\n\n    // Listen for WebRTC signaling events\n    this.setupSignalingListeners();\n  }\n  setupSignalingListeners() {\n    // Handle incoming offer\n    this.socket.on('webrtc-offer', async data => {\n      this.debugLog('üì• Received WebRTC offer');\n      try {\n        await this.handleOffer(data.offer);\n        this.debugLog('‚úÖ Processed offer and sent answer');\n      } catch (error) {\n        this.debugLog(`‚ùå Error handling offer: ${error.message}`);\n      }\n    });\n\n    // Handle incoming answer\n    this.socket.on('webrtc-answer', async data => {\n      this.debugLog('üì• Received WebRTC answer');\n      try {\n        await this.handleAnswer(data.answer);\n        this.debugLog('‚úÖ Processed answer');\n      } catch (error) {\n        this.debugLog(`‚ùå Error handling answer: ${error.message}`);\n      }\n    });\n\n    // Handle ICE candidates\n    this.socket.on('webrtc-ice-candidate', async data => {\n      this.debugLog('üßä Received ICE candidate');\n      try {\n        await this.handleIceCandidate(data.candidate);\n      } catch (error) {\n        this.debugLog(`‚ùå Error handling ICE candidate: ${error.message}`);\n      }\n    });\n\n    // Handle call initiation (for host)\n    this.socket.on('start-call', async () => {\n      this.debugLog('üöÄ Starting call as host');\n      await this.createOffer();\n    });\n\n    // Handle user events\n    this.socket.on('user-joined', data => {\n      this.debugLog(`üëã User joined room (${data.participantCount} total)`);\n    });\n    this.socket.on('user-left', data => {\n      this.debugLog(`üëã User left room (${data.participantCount} remaining)`);\n      if (data.participantCount === 0) {\n        this.cleanup();\n      }\n    });\n  }\n\n  // Join or create a room\n  async joinRoom(roomId) {\n    if (!this.socket) {\n      this.connectToSignalingServer();\n      await new Promise(resolve => {\n        this.socket.on('connect', resolve);\n      });\n    }\n    return new Promise((resolve, reject) => {\n      this.roomId = roomId;\n      this.socket.emit('join-room', roomId, response => {\n        if (response.success) {\n          this.isHost = response.isHost;\n          this.debugLog(`‚úÖ Joined room as ${this.isHost ? 'HOST' : 'GUEST'}`);\n          this.debugLog(`üë• Participants: ${response.participantCount}/2`);\n\n          // Initialize WebRTC\n          this.initializePeerConnection();\n          resolve({\n            success: true,\n            isHost: this.isHost,\n            participantCount: response.participantCount\n          });\n        } else {\n          this.debugLog(`‚ùå Failed to join room: ${response.message}`);\n          reject(new Error(response.message));\n        }\n      });\n    });\n  }\n  initializePeerConnection() {\n    this.debugLog('üîÑ Initializing peer connection...');\n    this.peerConnection = new RTCPeerConnection(this.config);\n\n    // Create data channel (host only)\n    if (this.isHost) {\n      this.dataChannel = this.peerConnection.createDataChannel('whiteboard', {\n        ordered: true\n      });\n      this.setupDataChannel();\n      this.debugLog('üì∫ Data channel created (host)');\n    }\n\n    // Handle incoming data channel (guest)\n    this.peerConnection.ondatachannel = event => {\n      this.debugLog('üì∫ Data channel received (guest)');\n      this.dataChannel = event.channel;\n      this.setupDataChannel();\n    };\n\n    // Handle ICE candidates\n    this.peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        this.debugLog('üßä Sending ICE candidate');\n        this.socket.emit('webrtc-ice-candidate', {\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Monitor connection state\n    this.peerConnection.onconnectionstatechange = () => {\n      const state = this.peerConnection.connectionState;\n      this.debugLog(`üîÑ Connection state: ${state}`);\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(state);\n      }\n      if (state === 'connected') {\n        this.debugLog('üéâ WebRTC connection established!');\n        if (this.connectionTimeout) {\n          clearTimeout(this.connectionTimeout);\n        }\n      } else if (state === 'failed' || state === 'disconnected') {\n        this.debugLog('‚ùå Connection failed or disconnected');\n        this.cleanup();\n      }\n    };\n\n    // Set connection timeout\n    this.connectionTimeout = setTimeout(() => {\n      var _this$peerConnection;\n      if (((_this$peerConnection = this.peerConnection) === null || _this$peerConnection === void 0 ? void 0 : _this$peerConnection.connectionState) !== 'connected') {\n        this.debugLog('‚è∞ Connection timeout - cleaning up');\n        this.cleanup();\n      }\n    }, 30000); // 30 second timeout\n  }\n  setupDataChannel() {\n    this.dataChannel.onopen = () => {\n      this.debugLog('üì∫ Data channel opened');\n    };\n    this.dataChannel.onclose = () => {\n      this.debugLog('üì∫ Data channel closed');\n    };\n    this.dataChannel.onmessage = event => {\n      if (this.onDataReceived) {\n        const data = JSON.parse(event.data);\n        this.onDataReceived(data);\n      }\n    };\n    this.dataChannel.onerror = error => {\n      this.debugLog(`‚ùå Data channel error: ${error}`);\n    };\n  }\n  async createOffer() {\n    try {\n      this.debugLog('üì§ Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(offer);\n      this.socket.emit('webrtc-offer', {\n        offer\n      });\n      this.debugLog('üì§ Offer sent');\n    } catch (error) {\n      this.debugLog(`‚ùå Error creating offer: ${error.message}`);\n      throw error;\n    }\n  }\n  async handleOffer(offer) {\n    try {\n      await this.peerConnection.setRemoteDescription(offer);\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(answer);\n      this.socket.emit('webrtc-answer', {\n        answer\n      });\n      this.debugLog('üì§ Answer sent');\n    } catch (error) {\n      this.debugLog(`‚ùå Error handling offer: ${error.message}`);\n      throw error;\n    }\n  }\n  async handleAnswer(answer) {\n    try {\n      await this.peerConnection.setRemoteDescription(answer);\n    } catch (error) {\n      this.debugLog(`‚ùå Error handling answer: ${error.message}`);\n      throw error;\n    }\n  }\n  async handleIceCandidate(candidate) {\n    try {\n      await this.peerConnection.addIceCandidate(candidate);\n    } catch (error) {\n      this.debugLog(`‚ùå Error adding ICE candidate: ${error.message}`);\n    }\n  }\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      this.dataChannel.send(JSON.stringify(data));\n      return true;\n    }\n    return false;\n  }\n  getConnectionState() {\n    var _this$peerConnection2;\n    return ((_this$peerConnection2 = this.peerConnection) === null || _this$peerConnection2 === void 0 ? void 0 : _this$peerConnection2.connectionState) || 'new';\n  }\n  cleanup() {\n    this.debugLog('üßπ Cleaning up WebRTC connection...');\n    if (this.connectionTimeout) {\n      clearTimeout(this.connectionTimeout);\n    }\n    if (this.dataChannel) {\n      this.dataChannel.close();\n      this.dataChannel = null;\n    }\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n    this.roomId = null;\n    this.isHost = false;\n  }\n  debugLog(message) {\n    console.log(`[WebRTC] ${message}`);\n    if (this.onDebugLog) {\n      this.onDebugLog(message);\n    }\n  }\n}\nexport default WebRTCManager;","map":{"version":3,"names":["io","WebRTCManager","constructor","peerConnection","dataChannel","socket","roomId","isHost","onConnectionStateChange","onDataReceived","onDebugLog","connectionTimeout","config","iceServers","urls","iceCandidatePoolSize","connectToSignalingServer","debugLog","transports","on","error","message","setupSignalingListeners","data","handleOffer","offer","handleAnswer","answer","handleIceCandidate","candidate","createOffer","participantCount","cleanup","joinRoom","Promise","resolve","reject","emit","response","success","initializePeerConnection","Error","RTCPeerConnection","createDataChannel","ordered","setupDataChannel","ondatachannel","event","channel","onicecandidate","onconnectionstatechange","state","connectionState","clearTimeout","setTimeout","_this$peerConnection","onopen","onclose","onmessage","JSON","parse","onerror","setLocalDescription","setRemoteDescription","createAnswer","addIceCandidate","sendData","readyState","send","stringify","getConnectionState","_this$peerConnection2","close","disconnect","console","log"],"sources":["C:/Users/eniac/Desktop/wrtc/src/services/WebRTCManager.js"],"sourcesContent":["import { io } from 'socket.io-client';\n\nclass WebRTCManager {\n  constructor() {\n    this.peerConnection = null;\n    this.dataChannel = null;\n    this.socket = null;\n    this.roomId = null;\n    this.isHost = false;\n    this.onConnectionStateChange = null;\n    this.onDataReceived = null;\n    this.onDebugLog = null;\n    this.connectionTimeout = null;\n    \n    // WebRTC configuration with STUN servers\n    this.config = {\n      iceServers: [\n        { urls: 'stun:stun.l.google.com:19302' },\n        { urls: 'stun:stun1.l.google.com:19302' },\n        { urls: 'stun:stun2.l.google.com:19302' }\n      ],\n      iceCandidatePoolSize: 10\n    };\n  }\n\n  // Connect to signaling server\n  connectToSignalingServer() {\n    this.debugLog('üîó Connecting to signaling server...');\n    \n    this.socket = io('http://localhost:3001', {\n      transports: ['websocket', 'polling']\n    });\n\n    this.socket.on('connect', () => {\n      this.debugLog('‚úÖ Connected to signaling server');\n    });\n\n    this.socket.on('disconnect', () => {\n      this.debugLog('‚ùå Disconnected from signaling server');\n    });\n\n    this.socket.on('connect_error', (error) => {\n      this.debugLog(`‚ùå Connection error: ${error.message}`);\n    });\n\n    // Listen for WebRTC signaling events\n    this.setupSignalingListeners();\n  }\n\n  setupSignalingListeners() {\n    // Handle incoming offer\n    this.socket.on('webrtc-offer', async (data) => {\n      this.debugLog('üì• Received WebRTC offer');\n      try {\n        await this.handleOffer(data.offer);\n        this.debugLog('‚úÖ Processed offer and sent answer');\n      } catch (error) {\n        this.debugLog(`‚ùå Error handling offer: ${error.message}`);\n      }\n    });\n\n    // Handle incoming answer\n    this.socket.on('webrtc-answer', async (data) => {\n      this.debugLog('üì• Received WebRTC answer');\n      try {\n        await this.handleAnswer(data.answer);\n        this.debugLog('‚úÖ Processed answer');\n      } catch (error) {\n        this.debugLog(`‚ùå Error handling answer: ${error.message}`);\n      }\n    });\n\n    // Handle ICE candidates\n    this.socket.on('webrtc-ice-candidate', async (data) => {\n      this.debugLog('üßä Received ICE candidate');\n      try {\n        await this.handleIceCandidate(data.candidate);\n      } catch (error) {\n        this.debugLog(`‚ùå Error handling ICE candidate: ${error.message}`);\n      }\n    });\n\n    // Handle call initiation (for host)\n    this.socket.on('start-call', async () => {\n      this.debugLog('üöÄ Starting call as host');\n      await this.createOffer();\n    });\n\n    // Handle user events\n    this.socket.on('user-joined', (data) => {\n      this.debugLog(`üëã User joined room (${data.participantCount} total)`);\n    });\n\n    this.socket.on('user-left', (data) => {\n      this.debugLog(`üëã User left room (${data.participantCount} remaining)`);\n      if (data.participantCount === 0) {\n        this.cleanup();\n      }\n    });\n  }\n\n  // Join or create a room\n  async joinRoom(roomId) {\n    if (!this.socket) {\n      this.connectToSignalingServer();\n      await new Promise(resolve => {\n        this.socket.on('connect', resolve);\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this.roomId = roomId;\n      \n      this.socket.emit('join-room', roomId, (response) => {\n        if (response.success) {\n          this.isHost = response.isHost;\n          this.debugLog(`‚úÖ Joined room as ${this.isHost ? 'HOST' : 'GUEST'}`);\n          this.debugLog(`üë• Participants: ${response.participantCount}/2`);\n          \n          // Initialize WebRTC\n          this.initializePeerConnection();\n          \n          resolve({\n            success: true,\n            isHost: this.isHost,\n            participantCount: response.participantCount\n          });\n        } else {\n          this.debugLog(`‚ùå Failed to join room: ${response.message}`);\n          reject(new Error(response.message));\n        }\n      });\n    });\n  }\n\n  initializePeerConnection() {\n    this.debugLog('üîÑ Initializing peer connection...');\n    \n    this.peerConnection = new RTCPeerConnection(this.config);\n\n    // Create data channel (host only)\n    if (this.isHost) {\n      this.dataChannel = this.peerConnection.createDataChannel('whiteboard', {\n        ordered: true\n      });\n      this.setupDataChannel();\n      this.debugLog('üì∫ Data channel created (host)');\n    }\n\n    // Handle incoming data channel (guest)\n    this.peerConnection.ondatachannel = (event) => {\n      this.debugLog('üì∫ Data channel received (guest)');\n      this.dataChannel = event.channel;\n      this.setupDataChannel();\n    };\n\n    // Handle ICE candidates\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        this.debugLog('üßä Sending ICE candidate');\n        this.socket.emit('webrtc-ice-candidate', {\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Monitor connection state\n    this.peerConnection.onconnectionstatechange = () => {\n      const state = this.peerConnection.connectionState;\n      this.debugLog(`üîÑ Connection state: ${state}`);\n      \n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(state);\n      }\n\n      if (state === 'connected') {\n        this.debugLog('üéâ WebRTC connection established!');\n        if (this.connectionTimeout) {\n          clearTimeout(this.connectionTimeout);\n        }\n      } else if (state === 'failed' || state === 'disconnected') {\n        this.debugLog('‚ùå Connection failed or disconnected');\n        this.cleanup();\n      }\n    };\n\n    // Set connection timeout\n    this.connectionTimeout = setTimeout(() => {\n      if (this.peerConnection?.connectionState !== 'connected') {\n        this.debugLog('‚è∞ Connection timeout - cleaning up');\n        this.cleanup();\n      }\n    }, 30000); // 30 second timeout\n  }\n\n  setupDataChannel() {\n    this.dataChannel.onopen = () => {\n      this.debugLog('üì∫ Data channel opened');\n    };\n\n    this.dataChannel.onclose = () => {\n      this.debugLog('üì∫ Data channel closed');\n    };\n\n    this.dataChannel.onmessage = (event) => {\n      if (this.onDataReceived) {\n        const data = JSON.parse(event.data);\n        this.onDataReceived(data);\n      }\n    };\n\n    this.dataChannel.onerror = (error) => {\n      this.debugLog(`‚ùå Data channel error: ${error}`);\n    };\n  }\n\n  async createOffer() {\n    try {\n      this.debugLog('üì§ Creating offer...');\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(offer);\n      \n      this.socket.emit('webrtc-offer', { offer });\n      this.debugLog('üì§ Offer sent');\n    } catch (error) {\n      this.debugLog(`‚ùå Error creating offer: ${error.message}`);\n      throw error;\n    }\n  }\n\n  async handleOffer(offer) {\n    try {\n      await this.peerConnection.setRemoteDescription(offer);\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(answer);\n      \n      this.socket.emit('webrtc-answer', { answer });\n      this.debugLog('üì§ Answer sent');\n    } catch (error) {\n      this.debugLog(`‚ùå Error handling offer: ${error.message}`);\n      throw error;\n    }\n  }\n\n  async handleAnswer(answer) {\n    try {\n      await this.peerConnection.setRemoteDescription(answer);\n    } catch (error) {\n      this.debugLog(`‚ùå Error handling answer: ${error.message}`);\n      throw error;\n    }\n  }\n\n  async handleIceCandidate(candidate) {\n    try {\n      await this.peerConnection.addIceCandidate(candidate);\n    } catch (error) {\n      this.debugLog(`‚ùå Error adding ICE candidate: ${error.message}`);\n    }\n  }\n\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      this.dataChannel.send(JSON.stringify(data));\n      return true;\n    }\n    return false;\n  }\n\n  getConnectionState() {\n    return this.peerConnection?.connectionState || 'new';\n  }\n\n  cleanup() {\n    this.debugLog('üßπ Cleaning up WebRTC connection...');\n    \n    if (this.connectionTimeout) {\n      clearTimeout(this.connectionTimeout);\n    }\n\n    if (this.dataChannel) {\n      this.dataChannel.close();\n      this.dataChannel = null;\n    }\n\n    if (this.peerConnection) {\n      this.peerConnection.close();\n      this.peerConnection = null;\n    }\n\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n\n    this.roomId = null;\n    this.isHost = false;\n  }\n\n  debugLog(message) {\n    console.log(`[WebRTC] ${message}`);\n    if (this.onDebugLog) {\n      this.onDebugLog(message);\n    }\n  }\n}\n\nexport default WebRTCManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}