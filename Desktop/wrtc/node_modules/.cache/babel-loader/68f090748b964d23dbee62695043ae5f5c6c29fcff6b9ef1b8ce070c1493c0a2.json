{"ast":null,"code":"class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    this.answerPolling = null;\n    this.offerPolling = null;\n\n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [{\n      urls: 'stun:stun.l.google.com:19302'\n    }, {\n      urls: 'stun:stun1.l.google.com:19302'\n    }, {\n      urls: 'stun:stun2.l.google.com:19302'\n    }];\n  }\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n    console.log(`üöÄ Initializing WebRTC - Room: ${roomId}, Role: ${isHost ? 'HOST' : 'GUEST'}`);\n    console.log('üåê Current origin:', window.location.origin);\n\n    // Clear any existing data for this room first\n    this.cleanup();\n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('üîÑ Connection state:', this.localConnection.connectionState);\n        const connected = this.localConnection.connectionState === 'connected';\n        this.isConnected = connected;\n        if (this.onConnectionStateChange) {\n          this.onConnectionStateChange(connected);\n        }\n      };\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('üßä ICE connection state:', this.localConnection.iceConnectionState);\n      };\n      this.localConnection.onicegatheringstatechange = () => {\n        console.log('üì° ICE gathering state:', this.localConnection.iceGatheringState);\n      };\n      this.localConnection.onsignalingstatechange = () => {\n        console.log('üìã Signaling state:', this.localConnection.signalingState);\n      };\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('‚ùå WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n\n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,\n      // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    this.setupDataChannel(this.dataChannel);\n\n    // Handle ICE candidates\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('üßä Host ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('‚úÖ Host ICE gathering complete');\n      }\n    };\n\n    // Create offer\n    console.log('üìù Creating offer...');\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n\n    // Store offer in localStorage with multiple methods\n    const offerData = {\n      offer: offer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n\n    // Method 1: Standard localStorage\n    const offerKey = `offer_${this.roomId}`;\n    localStorage.setItem(offerKey, JSON.stringify(offerData));\n\n    // Method 2: Force localStorage sync with storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: offerKey,\n      newValue: JSON.stringify(offerData),\n      url: window.location.href\n    }));\n\n    // Method 3: Also store in global variable for same-page access\n    window.webrtcOffers = window.webrtcOffers || {};\n    window.webrtcOffers[this.roomId] = offerData;\n    console.log('üíæ Offer stored with multiple methods:', offerData);\n    console.log('üîç Verifying storage immediately:');\n    console.log('  - localStorage:', localStorage.getItem(offerKey));\n    console.log('  - window.webrtcOffers:', window.webrtcOffers[this.roomId]);\n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('‚è≥ Waiting for answer...');\n\n    // Listen for answer\n    this.waitForAnswer();\n  }\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n\n    // Handle ICE candidates\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('üßä Guest ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('‚úÖ Guest ICE gathering complete');\n      }\n    };\n\n    // Wait for offer\n    console.log('üîç Looking for offer...');\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    console.log('üì• Offer received, setting as remote description...');\n    console.log('üìã Current signaling state:', this.localConnection.signalingState);\n    try {\n      await this.localConnection.setRemoteDescription(offerData.offer);\n      console.log('‚úÖ Remote description (offer) set successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to set remote description (offer):', error);\n      throw error;\n    }\n\n    // Listen for data channel from host\n    this.localConnection.ondatachannel = event => {\n      console.log('üì° Data channel received from host');\n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n    };\n\n    // Create answer\n    console.log('üìù Creating answer...');\n    const answer = await this.localConnection.createAnswer();\n    await this.localConnection.setLocalDescription(answer);\n\n    // Store answer with multiple methods\n    const answerData = {\n      answer: answer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n    const answerKey = `answer_${this.roomId}`;\n    localStorage.setItem(answerKey, JSON.stringify(answerData));\n\n    // Force storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: answerKey,\n      newValue: JSON.stringify(answerData),\n      url: window.location.href\n    }));\n\n    // Global variable\n    window.webrtcAnswers = window.webrtcAnswers || {};\n    window.webrtcAnswers[this.roomId] = answerData;\n    console.log('üíæ Answer stored with multiple methods:', answerData);\n    console.log('‚úÖ Guest setup complete');\n\n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    channel.onopen = () => {\n      console.log('üéâ DATA CHANNEL OPENED - CONNECTION ESTABLISHED!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    channel.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® Data received:', data.type);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('‚ùå Failed to parse received data:', error);\n      }\n    };\n    channel.onerror = error => {\n      console.error('‚ùå Data channel error:', error);\n    };\n  }\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 30;\n      this.offerPolling = setInterval(() => {\n        attempts++;\n        console.log(`üîç Looking for offer... attempt ${attempts}/${maxAttempts}`);\n\n        // Debug: Show all localStorage keys and global variables\n        const allKeys = Object.keys(localStorage);\n        const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n        console.log('üì¶ All localStorage keys:', allKeys.length);\n        console.log('üì¶ Room-specific keys:', roomKeys);\n        console.log('üåê Global offers:', window.webrtcOffers);\n\n        // Try multiple methods to find the offer\n        let offerData = null;\n\n        // Method 1: localStorage\n        const localStorageOffer = localStorage.getItem(`offer_${this.roomId}`);\n        if (localStorageOffer) {\n          console.log('‚úÖ Found offer in localStorage');\n          offerData = localStorageOffer;\n        }\n\n        // Method 2: Global variable\n        if (!offerData && window.webrtcOffers && window.webrtcOffers[this.roomId]) {\n          console.log('‚úÖ Found offer in global variable');\n          offerData = JSON.stringify(window.webrtcOffers[this.roomId]);\n        }\n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            console.log('üìÑ Found offer data:', parsed);\n\n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              clearInterval(this.offerPolling);\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n              if (window.webrtcOffers) {\n                delete window.webrtcOffers[this.roomId];\n              }\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to parse offer:', error);\n          }\n        } else {\n          console.log('‚ùå No offer found with any method');\n        }\n        if (attempts >= maxAttempts) {\n          clearInterval(this.offerPolling);\n          reject(new Error('Timeout waiting for offer'));\n        }\n      }, 1000);\n    });\n  }\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 30;\n    this.answerPolling = setInterval(async () => {\n      attempts++;\n      console.log(`üîç Looking for answer... attempt ${attempts}/${maxAttempts}`);\n\n      // Debug: Show localStorage and global variables\n      const allKeys = Object.keys(localStorage);\n      const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n      console.log('üì¶ Room-specific keys:', roomKeys);\n      console.log('üåê Global answers:', window.webrtcAnswers);\n\n      // Try multiple methods to find the answer\n      let answerData = null;\n\n      // Method 1: localStorage\n      const localStorageAnswer = localStorage.getItem(`answer_${this.roomId}`);\n      if (localStorageAnswer) {\n        console.log('‚úÖ Found answer in localStorage');\n        answerData = localStorageAnswer;\n      }\n\n      // Method 2: Global variable\n      if (!answerData && window.webrtcAnswers && window.webrtcAnswers[this.roomId]) {\n        console.log('‚úÖ Found answer in global variable');\n        answerData = JSON.stringify(window.webrtcAnswers[this.roomId]);\n      }\n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n          console.log('üìÑ Found answer data:', parsed);\n\n          // Check connection state before setting remote description\n          console.log('üìã Current signaling state:', this.localConnection.signalingState);\n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting as remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            clearInterval(this.answerPolling);\n            this.answerProcessed = true;\n\n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            console.log('‚úÖ Remote description (answer) set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Wrong signaling state for answer:', this.localConnection.signalingState);\n          }\n        } catch (error) {\n          console.error('‚ùå Failed to set remote description (answer):', error);\n          clearInterval(this.answerPolling);\n        }\n      } else {\n        console.log('‚ùå No answer found with any method');\n      }\n      if (attempts >= maxAttempts) {\n        clearInterval(this.answerPolling);\n        console.error('‚ùå Timeout waiting for answer');\n      }\n    }, 1000);\n  }\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n    console.log(`üíæ Stored ICE candidate for ${role}`);\n  }\n  async processStoredIceCandidates(role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n  }\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('‚ùå Failed to send data:', error);\n      }\n    } else {\n      var _this$dataChannel;\n      console.warn('‚ö†Ô∏è Data channel not ready, state:', ((_this$dataChannel = this.dataChannel) === null || _this$dataChannel === void 0 ? void 0 : _this$dataChannel.readyState) || 'null');\n    }\n  }\n  cleanup() {\n    if (this.roomId) {\n      const keys = [`offer_${this.roomId}`, `answer_${this.roomId}`, `ice_${this.roomId}_host`, `ice_${this.roomId}_guest`];\n      keys.forEach(key => localStorage.removeItem(key));\n\n      // Clean global variables too\n      if (window.webrtcOffers) {\n        delete window.webrtcOffers[this.roomId];\n      }\n      if (window.webrtcAnswers) {\n        delete window.webrtcAnswers[this.roomId];\n      }\n      console.log('üßπ Cleaned up localStorage and global variables for room:', this.roomId);\n    }\n  }\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n\n    // Clear polling intervals\n    if (this.answerPolling) {\n      clearInterval(this.answerPolling);\n      this.answerPolling = null;\n    }\n    if (this.offerPolling) {\n      clearInterval(this.offerPolling);\n      this.offerPolling = null;\n    }\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\nexport default WebRTCManager;","map":{"version":3,"names":["WebRTCManager","constructor","localConnection","dataChannel","isHost","roomId","onDataReceived","onConnectionStateChange","isConnected","answerProcessed","offerProcessed","answerPolling","offerPolling","iceServers","urls","initialize","console","log","window","location","origin","cleanup","RTCPeerConnection","iceCandidatePoolSize","bundlePolicy","rtcpMuxPolicy","onconnectionstatechange","connectionState","connected","oniceconnectionstatechange","iceConnectionState","onicegatheringstatechange","iceGatheringState","onsignalingstatechange","signalingState","setupAsHost","setupAsGuest","error","createDataChannel","ordered","maxRetransmits","setupDataChannel","onicecandidate","event","candidate","storeIceCandidate","offer","createOffer","setLocalDescription","offerData","timestamp","Date","now","offerKey","localStorage","setItem","JSON","stringify","dispatchEvent","StorageEvent","key","newValue","url","href","webrtcOffers","getItem","waitForAnswer","waitForOffer","Error","setRemoteDescription","ondatachannel","channel","answer","createAnswer","answerData","answerKey","webrtcAnswers","setTimeout","processStoredIceCandidates","onopen","onclose","onmessage","data","parse","type","onerror","Promise","resolve","reject","attempts","maxAttempts","setInterval","allKeys","Object","keys","roomKeys","filter","k","includes","length","localStorageOffer","parsed","clearInterval","removeItem","localStorageAnswer","role","existing","push","candidates","candidateData","addIceCandidate","sendData","readyState","send","_this$dataChannel","warn","forEach","disconnect","close"],"sources":["C:/Users/eniac/Desktop/wrtc/src/services/WebRTCManager.js"],"sourcesContent":["class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    this.answerPolling = null;\n    this.offerPolling = null;\n    \n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [\n      { urls: 'stun:stun.l.google.com:19302' },\n      { urls: 'stun:stun1.l.google.com:19302' },\n      { urls: 'stun:stun2.l.google.com:19302' }\n    ];\n  }\n\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n    \n    console.log(`üöÄ Initializing WebRTC - Room: ${roomId}, Role: ${isHost ? 'HOST' : 'GUEST'}`);\n    console.log('üåê Current origin:', window.location.origin);\n    \n    // Clear any existing data for this room first\n    this.cleanup();\n    \n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('üîÑ Connection state:', this.localConnection.connectionState);\n        const connected = this.localConnection.connectionState === 'connected';\n        this.isConnected = connected;\n        if (this.onConnectionStateChange) {\n          this.onConnectionStateChange(connected);\n        }\n      };\n\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('üßä ICE connection state:', this.localConnection.iceConnectionState);\n      };\n\n      this.localConnection.onicegatheringstatechange = () => {\n        console.log('üì° ICE gathering state:', this.localConnection.iceGatheringState);\n      };\n\n      this.localConnection.onsignalingstatechange = () => {\n        console.log('üìã Signaling state:', this.localConnection.signalingState);\n      };\n\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('‚ùå WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n    \n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,  // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    \n    this.setupDataChannel(this.dataChannel);\n    \n    // Handle ICE candidates\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('üßä Host ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('‚úÖ Host ICE gathering complete');\n      }\n    };\n    \n    // Create offer\n    console.log('üìù Creating offer...');\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n    \n    // Store offer in localStorage with multiple methods\n    const offerData = {\n      offer: offer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n    \n    // Method 1: Standard localStorage\n    const offerKey = `offer_${this.roomId}`;\n    localStorage.setItem(offerKey, JSON.stringify(offerData));\n    \n    // Method 2: Force localStorage sync with storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: offerKey,\n      newValue: JSON.stringify(offerData),\n      url: window.location.href\n    }));\n    \n    // Method 3: Also store in global variable for same-page access\n    window.webrtcOffers = window.webrtcOffers || {};\n    window.webrtcOffers[this.roomId] = offerData;\n    \n    console.log('üíæ Offer stored with multiple methods:', offerData);\n    console.log('üîç Verifying storage immediately:');\n    console.log('  - localStorage:', localStorage.getItem(offerKey));\n    console.log('  - window.webrtcOffers:', window.webrtcOffers[this.roomId]);\n    \n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('‚è≥ Waiting for answer...');\n    \n    // Listen for answer\n    this.waitForAnswer();\n  }\n\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n    \n    // Handle ICE candidates\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('üßä Guest ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('‚úÖ Guest ICE gathering complete');\n      }\n    };\n    \n    // Wait for offer\n    console.log('üîç Looking for offer...');\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    \n    console.log('üì• Offer received, setting as remote description...');\n    console.log('üìã Current signaling state:', this.localConnection.signalingState);\n    \n    try {\n      await this.localConnection.setRemoteDescription(offerData.offer);\n      console.log('‚úÖ Remote description (offer) set successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to set remote description (offer):', error);\n      throw error;\n    }\n    \n    // Listen for data channel from host\n    this.localConnection.ondatachannel = (event) => {\n      console.log('üì° Data channel received from host');\n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n    };\n    \n    // Create answer\n    console.log('üìù Creating answer...');\n    const answer = await this.localConnection.createAnswer();\n    await this.localConnection.setLocalDescription(answer);\n    \n    // Store answer with multiple methods\n    const answerData = {\n      answer: answer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n    \n    const answerKey = `answer_${this.roomId}`;\n    localStorage.setItem(answerKey, JSON.stringify(answerData));\n    \n    // Force storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: answerKey,\n      newValue: JSON.stringify(answerData),\n      url: window.location.href\n    }));\n    \n    // Global variable\n    window.webrtcAnswers = window.webrtcAnswers || {};\n    window.webrtcAnswers[this.roomId] = answerData;\n    \n    console.log('üíæ Answer stored with multiple methods:', answerData);\n    console.log('‚úÖ Guest setup complete');\n    \n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    \n    channel.onopen = () => {\n      console.log('üéâ DATA CHANNEL OPENED - CONNECTION ESTABLISHED!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    \n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    \n    channel.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® Data received:', data.type);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('‚ùå Failed to parse received data:', error);\n      }\n    };\n    \n    channel.onerror = (error) => {\n      console.error('‚ùå Data channel error:', error);\n    };\n  }\n\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 30;\n      \n      this.offerPolling = setInterval(() => {\n        attempts++;\n        console.log(`üîç Looking for offer... attempt ${attempts}/${maxAttempts}`);\n        \n        // Debug: Show all localStorage keys and global variables\n        const allKeys = Object.keys(localStorage);\n        const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n        console.log('üì¶ All localStorage keys:', allKeys.length);\n        console.log('üì¶ Room-specific keys:', roomKeys);\n        console.log('üåê Global offers:', window.webrtcOffers);\n        \n        // Try multiple methods to find the offer\n        let offerData = null;\n        \n        // Method 1: localStorage\n        const localStorageOffer = localStorage.getItem(`offer_${this.roomId}`);\n        if (localStorageOffer) {\n          console.log('‚úÖ Found offer in localStorage');\n          offerData = localStorageOffer;\n        }\n        \n        // Method 2: Global variable\n        if (!offerData && window.webrtcOffers && window.webrtcOffers[this.roomId]) {\n          console.log('‚úÖ Found offer in global variable');\n          offerData = JSON.stringify(window.webrtcOffers[this.roomId]);\n        }\n        \n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            console.log('üìÑ Found offer data:', parsed);\n            \n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              clearInterval(this.offerPolling);\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n              if (window.webrtcOffers) {\n                delete window.webrtcOffers[this.roomId];\n              }\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to parse offer:', error);\n          }\n        } else {\n          console.log('‚ùå No offer found with any method');\n        }\n        \n        if (attempts >= maxAttempts) {\n          clearInterval(this.offerPolling);\n          reject(new Error('Timeout waiting for offer'));\n        }\n      }, 1000);\n    });\n  }\n\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 30;\n    \n    this.answerPolling = setInterval(async () => {\n      attempts++;\n      console.log(`üîç Looking for answer... attempt ${attempts}/${maxAttempts}`);\n      \n      // Debug: Show localStorage and global variables\n      const allKeys = Object.keys(localStorage);\n      const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n      console.log('üì¶ Room-specific keys:', roomKeys);\n      console.log('üåê Global answers:', window.webrtcAnswers);\n      \n      // Try multiple methods to find the answer\n      let answerData = null;\n      \n      // Method 1: localStorage\n      const localStorageAnswer = localStorage.getItem(`answer_${this.roomId}`);\n      if (localStorageAnswer) {\n        console.log('‚úÖ Found answer in localStorage');\n        answerData = localStorageAnswer;\n      }\n      \n      // Method 2: Global variable\n      if (!answerData && window.webrtcAnswers && window.webrtcAnswers[this.roomId]) {\n        console.log('‚úÖ Found answer in global variable');\n        answerData = JSON.stringify(window.webrtcAnswers[this.roomId]);\n      }\n      \n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n          console.log('üìÑ Found answer data:', parsed);\n          \n          // Check connection state before setting remote description\n          console.log('üìã Current signaling state:', this.localConnection.signalingState);\n          \n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting as remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            \n            clearInterval(this.answerPolling);\n            this.answerProcessed = true;\n            \n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            \n            console.log('‚úÖ Remote description (answer) set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Wrong signaling state for answer:', this.localConnection.signalingState);\n          }\n        } catch (error) {\n          console.error('‚ùå Failed to set remote description (answer):', error);\n          clearInterval(this.answerPolling);\n        }\n      } else {\n        console.log('‚ùå No answer found with any method');\n      }\n      \n      if (attempts >= maxAttempts) {\n        clearInterval(this.answerPolling);\n        console.error('‚ùå Timeout waiting for answer');\n      }\n    }, 1000);\n  }\n\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n    console.log(`üíæ Stored ICE candidate for ${role}`);\n  }\n\n  async processStoredIceCandidates(role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    \n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    \n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n  }\n\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('‚ùå Failed to send data:', error);\n      }\n    } else {\n      console.warn('‚ö†Ô∏è Data channel not ready, state:', this.dataChannel?.readyState || 'null');\n    }\n  }\n\n  cleanup() {\n    if (this.roomId) {\n      const keys = [`offer_${this.roomId}`, `answer_${this.roomId}`, `ice_${this.roomId}_host`, `ice_${this.roomId}_guest`];\n      keys.forEach(key => localStorage.removeItem(key));\n      \n      // Clean global variables too\n      if (window.webrtcOffers) {\n        delete window.webrtcOffers[this.roomId];\n      }\n      if (window.webrtcAnswers) {\n        delete window.webrtcAnswers[this.roomId];\n      }\n      \n      console.log('üßπ Cleaned up localStorage and global variables for room:', this.roomId);\n    }\n  }\n\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n    \n    // Clear polling intervals\n    if (this.answerPolling) {\n      clearInterval(this.answerPolling);\n      this.answerPolling = null;\n    }\n    if (this.offerPolling) {\n      clearInterval(this.offerPolling);\n      this.offerPolling = null;\n    }\n    \n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    \n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    \n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\n\nexport default WebRTCManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}