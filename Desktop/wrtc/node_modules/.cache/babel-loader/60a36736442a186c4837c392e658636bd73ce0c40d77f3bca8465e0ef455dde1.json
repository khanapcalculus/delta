{"ast":null,"code":"class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n\n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [{\n      urls: 'stun:stun.l.google.com:19302'\n    }, {\n      urls: 'stun:stun1.l.google.com:19302'\n    }, {\n      urls: 'stun:stun2.l.google.com:19302'\n    }];\n  }\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n\n    // Clear any existing data for this room first\n    this.cleanup();\n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('Connection state:', this.localConnection.connectionState);\n        const connected = this.localConnection.connectionState === 'connected';\n        this.isConnected = connected;\n        if (this.onConnectionStateChange) {\n          this.onConnectionStateChange(connected);\n        }\n      };\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('ICE connection state:', this.localConnection.iceConnectionState);\n      };\n      this.localConnection.onicegatheringstatechange = () => {\n        console.log('ICE gathering state:', this.localConnection.iceGatheringState);\n      };\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n\n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,\n      // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    this.setupDataChannel(this.dataChannel);\n\n    // Handle ICE candidates first\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('Host ICE candidate:', event.candidate.candidate);\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('Host ICE gathering complete');\n      }\n    };\n\n    // Create offer\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n\n    // Store offer in localStorage\n    localStorage.setItem(`offer_${this.roomId}`, JSON.stringify({\n      offer: offer,\n      timestamp: Date.now()\n    }));\n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('Offer stored, waiting for answer...');\n\n    // Listen for answer\n    this.waitForAnswer();\n  }\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n\n    // Handle ICE candidates\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('Guest ICE candidate:', event.candidate.candidate);\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('Guest ICE gathering complete');\n      }\n    };\n\n    // Wait for offer\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    console.log('üì• Offer received, setting remote description...');\n\n    // Check connection state before setting remote description\n    if (this.localConnection.signalingState !== 'stable') {\n      console.log('‚ö†Ô∏è Connection not in stable state:', this.localConnection.signalingState);\n    }\n    await this.localConnection.setRemoteDescription(offerData.offer);\n    console.log('‚úÖ Remote description set successfully');\n\n    // Listen for data channel\n    this.localConnection.ondatachannel = event => {\n      console.log('üì° Data channel received from host');\n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n    };\n\n    // Create answer\n    const answer = await this.localConnection.createAnswer();\n    await this.localConnection.setLocalDescription(answer);\n\n    // Store answer\n    localStorage.setItem(`answer_${this.roomId}`, JSON.stringify({\n      answer: answer,\n      timestamp: Date.now()\n    }));\n    console.log('‚úÖ Answer created and stored');\n\n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    channel.onopen = () => {\n      console.log('üéâ Data channel opened - Connection established!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    channel.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('Failed to parse received data:', error);\n      }\n    };\n    channel.onerror = error => {\n      console.error('Data channel error:', error);\n    };\n  }\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 60; // Wait up to 60 seconds\n\n      const checkForOffer = () => {\n        if (this.isConnected || this.offerProcessed) {\n          console.log('‚èπÔ∏è Stopping offer check - already connected or processed');\n          return;\n        }\n        attempts++;\n        console.log(`üîç Checking for offer... attempt ${attempts}/${maxAttempts}`);\n        const offerData = localStorage.getItem(`offer_${this.roomId}`);\n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n            }\n          } catch (error) {\n            console.error('Failed to parse offer:', error);\n          }\n        }\n        if (attempts >= maxAttempts) {\n          reject(new Error('Timeout waiting for offer'));\n          return;\n        }\n        setTimeout(checkForOffer, 1000);\n      };\n      checkForOffer();\n    });\n  }\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 60; // Wait up to 60 seconds\n\n    const checkForAnswer = async () => {\n      if (this.isConnected || this.answerProcessed) {\n        console.log('‚èπÔ∏è Stopping answer check - already connected or processed');\n        return;\n      }\n      attempts++;\n      console.log(`üîç Checking for answer... attempt ${attempts}/${maxAttempts}`);\n      const answerData = localStorage.getItem(`answer_${this.roomId}`);\n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n\n          // Check connection state before setting remote description\n          console.log('Current signaling state:', this.localConnection.signalingState);\n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            this.answerProcessed = true;\n\n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            console.log('‚úÖ Remote description set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Ignoring answer - wrong signaling state:', this.localConnection.signalingState);\n            if (this.localConnection.signalingState === 'stable') {\n              console.log('‚úÖ Connection already established');\n              this.answerProcessed = true;\n              return;\n            }\n          }\n        } catch (error) {\n          console.error('Failed to set remote description:', error);\n          // Don't retry if it's a state error\n          if (error.name === 'InvalidStateError') {\n            console.log('‚èπÔ∏è Stopping due to invalid state error');\n            this.answerProcessed = true;\n            return;\n          }\n        }\n      }\n      if (attempts < maxAttempts) {\n        setTimeout(checkForAnswer, 1000);\n      } else {\n        console.error('Timeout waiting for answer');\n      }\n    };\n    checkForAnswer();\n  }\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n  }\n  async processStoredIceCandidates(role) {\n    if (this.isConnected) {\n      console.log('‚èπÔ∏è Stopping ICE processing - already connected');\n      return;\n    }\n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n\n    // Continue polling for new candidates only if not connected\n    if (!this.isConnected) {\n      setTimeout(() => {\n        const newCandidates = JSON.parse(localStorage.getItem(key) || '[]');\n        if (newCandidates.length > candidates.length) {\n          this.processStoredIceCandidates(role);\n        } else {\n          setTimeout(() => this.processStoredIceCandidates(role), 5000);\n        }\n      }, 2000);\n    }\n  }\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('Failed to send data:', error);\n      }\n    } else {\n      var _this$dataChannel;\n      console.warn('Data channel not ready, state:', ((_this$dataChannel = this.dataChannel) === null || _this$dataChannel === void 0 ? void 0 : _this$dataChannel.readyState) || 'null');\n    }\n  }\n  cleanup() {\n    if (this.roomId) {\n      localStorage.removeItem(`offer_${this.roomId}`);\n      localStorage.removeItem(`answer_${this.roomId}`);\n      localStorage.removeItem(`ice_${this.roomId}_host`);\n      localStorage.removeItem(`ice_${this.roomId}_guest`);\n    }\n  }\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\nexport default WebRTCManager;","map":{"version":3,"names":["WebRTCManager","constructor","localConnection","dataChannel","isHost","roomId","onDataReceived","onConnectionStateChange","isConnected","answerProcessed","offerProcessed","iceServers","urls","initialize","cleanup","RTCPeerConnection","iceCandidatePoolSize","bundlePolicy","rtcpMuxPolicy","onconnectionstatechange","console","log","connectionState","connected","oniceconnectionstatechange","iceConnectionState","onicegatheringstatechange","iceGatheringState","setupAsHost","setupAsGuest","error","createDataChannel","ordered","maxRetransmits","setupDataChannel","onicecandidate","event","candidate","storeIceCandidate","offer","createOffer","setLocalDescription","localStorage","setItem","JSON","stringify","timestamp","Date","now","waitForAnswer","offerData","waitForOffer","Error","signalingState","setRemoteDescription","ondatachannel","channel","answer","createAnswer","setTimeout","processStoredIceCandidates","onopen","onclose","onmessage","data","parse","onerror","Promise","resolve","reject","attempts","maxAttempts","checkForOffer","getItem","parsed","removeItem","checkForAnswer","answerData","name","role","key","existing","push","candidates","length","candidateData","addIceCandidate","newCandidates","sendData","readyState","send","_this$dataChannel","warn","disconnect","close"],"sources":["C:/Users/eniac/Desktop/wrtc/src/services/WebRTCManager.js"],"sourcesContent":["class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    \n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [\n      { urls: 'stun:stun.l.google.com:19302' },\n      { urls: 'stun:stun1.l.google.com:19302' },\n      { urls: 'stun:stun2.l.google.com:19302' }\n    ];\n  }\n\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n    \n    // Clear any existing data for this room first\n    this.cleanup();\n    \n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('Connection state:', this.localConnection.connectionState);\n        const connected = this.localConnection.connectionState === 'connected';\n        this.isConnected = connected;\n        if (this.onConnectionStateChange) {\n          this.onConnectionStateChange(connected);\n        }\n      };\n\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('ICE connection state:', this.localConnection.iceConnectionState);\n      };\n\n      this.localConnection.onicegatheringstatechange = () => {\n        console.log('ICE gathering state:', this.localConnection.iceGatheringState);\n      };\n\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n    \n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,  // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    \n    this.setupDataChannel(this.dataChannel);\n    \n    // Handle ICE candidates first\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('Host ICE candidate:', event.candidate.candidate);\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('Host ICE gathering complete');\n      }\n    };\n    \n    // Create offer\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n    \n    // Store offer in localStorage\n    localStorage.setItem(`offer_${this.roomId}`, JSON.stringify({\n      offer: offer,\n      timestamp: Date.now()\n    }));\n    \n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('Offer stored, waiting for answer...');\n    \n    // Listen for answer\n    this.waitForAnswer();\n  }\n\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n    \n    // Handle ICE candidates\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('Guest ICE candidate:', event.candidate.candidate);\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('Guest ICE gathering complete');\n      }\n    };\n    \n    // Wait for offer\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    \n    console.log('üì• Offer received, setting remote description...');\n    \n    // Check connection state before setting remote description\n    if (this.localConnection.signalingState !== 'stable') {\n      console.log('‚ö†Ô∏è Connection not in stable state:', this.localConnection.signalingState);\n    }\n    \n    await this.localConnection.setRemoteDescription(offerData.offer);\n    console.log('‚úÖ Remote description set successfully');\n    \n    // Listen for data channel\n    this.localConnection.ondatachannel = (event) => {\n      console.log('üì° Data channel received from host');\n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n    };\n    \n    // Create answer\n    const answer = await this.localConnection.createAnswer();\n    await this.localConnection.setLocalDescription(answer);\n    \n    // Store answer\n    localStorage.setItem(`answer_${this.roomId}`, JSON.stringify({\n      answer: answer,\n      timestamp: Date.now()\n    }));\n    \n    console.log('‚úÖ Answer created and stored');\n    \n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    \n    channel.onopen = () => {\n      console.log('üéâ Data channel opened - Connection established!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    \n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    \n    channel.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('Failed to parse received data:', error);\n      }\n    };\n    \n    channel.onerror = (error) => {\n      console.error('Data channel error:', error);\n    };\n  }\n\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 60; // Wait up to 60 seconds\n      \n      const checkForOffer = () => {\n        if (this.isConnected || this.offerProcessed) {\n          console.log('‚èπÔ∏è Stopping offer check - already connected or processed');\n          return;\n        }\n        \n        attempts++;\n        console.log(`üîç Checking for offer... attempt ${attempts}/${maxAttempts}`);\n        \n        const offerData = localStorage.getItem(`offer_${this.roomId}`);\n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n            }\n          } catch (error) {\n            console.error('Failed to parse offer:', error);\n          }\n        }\n        \n        if (attempts >= maxAttempts) {\n          reject(new Error('Timeout waiting for offer'));\n          return;\n        }\n        \n        setTimeout(checkForOffer, 1000);\n      };\n      checkForOffer();\n    });\n  }\n\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 60; // Wait up to 60 seconds\n    \n    const checkForAnswer = async () => {\n      if (this.isConnected || this.answerProcessed) {\n        console.log('‚èπÔ∏è Stopping answer check - already connected or processed');\n        return;\n      }\n      \n      attempts++;\n      console.log(`üîç Checking for answer... attempt ${attempts}/${maxAttempts}`);\n      \n      const answerData = localStorage.getItem(`answer_${this.roomId}`);\n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n          \n          // Check connection state before setting remote description\n          console.log('Current signaling state:', this.localConnection.signalingState);\n          \n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            this.answerProcessed = true;\n            \n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            \n            console.log('‚úÖ Remote description set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Ignoring answer - wrong signaling state:', this.localConnection.signalingState);\n            if (this.localConnection.signalingState === 'stable') {\n              console.log('‚úÖ Connection already established');\n              this.answerProcessed = true;\n              return;\n            }\n          }\n        } catch (error) {\n          console.error('Failed to set remote description:', error);\n          // Don't retry if it's a state error\n          if (error.name === 'InvalidStateError') {\n            console.log('‚èπÔ∏è Stopping due to invalid state error');\n            this.answerProcessed = true;\n            return;\n          }\n        }\n      }\n      \n      if (attempts < maxAttempts) {\n        setTimeout(checkForAnswer, 1000);\n      } else {\n        console.error('Timeout waiting for answer');\n      }\n    };\n    checkForAnswer();\n  }\n\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n  }\n\n  async processStoredIceCandidates(role) {\n    if (this.isConnected) {\n      console.log('‚èπÔ∏è Stopping ICE processing - already connected');\n      return;\n    }\n    \n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    \n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    \n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n    \n    // Continue polling for new candidates only if not connected\n    if (!this.isConnected) {\n      setTimeout(() => {\n        const newCandidates = JSON.parse(localStorage.getItem(key) || '[]');\n        if (newCandidates.length > candidates.length) {\n          this.processStoredIceCandidates(role);\n        } else {\n          setTimeout(() => this.processStoredIceCandidates(role), 5000);\n        }\n      }, 2000);\n    }\n  }\n\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('Failed to send data:', error);\n      }\n    } else {\n      console.warn('Data channel not ready, state:', this.dataChannel?.readyState || 'null');\n    }\n  }\n\n  cleanup() {\n    if (this.roomId) {\n      localStorage.removeItem(`offer_${this.roomId}`);\n      localStorage.removeItem(`answer_${this.roomId}`);\n      localStorage.removeItem(`ice_${this.roomId}_host`);\n      localStorage.removeItem(`ice_${this.roomId}_guest`);\n    }\n  }\n\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n    \n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    \n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    \n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\n\nexport default WebRTCManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}