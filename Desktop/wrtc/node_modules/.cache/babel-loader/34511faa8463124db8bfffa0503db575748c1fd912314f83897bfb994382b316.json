{"ast":null,"code":"class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    this.answerPolling = null;\n    this.offerPolling = null;\n\n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [{\n      urls: 'stun:stun.l.google.com:19302'\n    }, {\n      urls: 'stun:stun1.l.google.com:19302'\n    }, {\n      urls: 'stun:stun2.l.google.com:19302'\n    }];\n  }\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n    console.log(`üöÄ Initializing WebRTC - Room: ${roomId}, Role: ${isHost ? 'HOST' : 'GUEST'}`);\n    console.log('üåê Current origin:', window.location.origin);\n\n    // Clear any existing data for this room first\n    this.cleanup();\n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('üîÑ Connection state:', this.localConnection.connectionState);\n        const connected = this.localConnection.connectionState === 'connected';\n        this.isConnected = connected;\n        if (this.onConnectionStateChange) {\n          this.onConnectionStateChange(connected);\n        }\n      };\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('üßä ICE connection state:', this.localConnection.iceConnectionState);\n      };\n      this.localConnection.onicegatheringstatechange = () => {\n        console.log('üì° ICE gathering state:', this.localConnection.iceGatheringState);\n      };\n      this.localConnection.onsignalingstatechange = () => {\n        console.log('üìã Signaling state:', this.localConnection.signalingState);\n      };\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('‚ùå WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n\n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,\n      // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    this.setupDataChannel(this.dataChannel);\n\n    // Handle ICE candidates\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('üßä Host ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('‚úÖ Host ICE gathering complete');\n      }\n    };\n\n    // Create offer\n    console.log('üìù Creating offer...');\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n\n    // Store offer in localStorage with multiple methods\n    const offerData = {\n      offer: offer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n\n    // Method 1: Standard localStorage\n    const offerKey = `offer_${this.roomId}`;\n    localStorage.setItem(offerKey, JSON.stringify(offerData));\n\n    // Method 2: Force localStorage sync with storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: offerKey,\n      newValue: JSON.stringify(offerData),\n      url: window.location.href\n    }));\n\n    // Method 3: Also store in global variable for same-page access\n    window.webrtcOffers = window.webrtcOffers || {};\n    window.webrtcOffers[this.roomId] = offerData;\n    console.log('üíæ Offer stored with multiple methods:', offerData);\n    console.log('üîç Verifying storage immediately:');\n    console.log('  - localStorage:', localStorage.getItem(offerKey));\n    console.log('  - window.webrtcOffers:', window.webrtcOffers[this.roomId]);\n\n    // Populate manual signaling field\n    setTimeout(() => {\n      const offerTextarea = document.getElementById('offerData');\n      if (offerTextarea) {\n        offerTextarea.value = JSON.stringify(offerData);\n        console.log('üìù Populated manual offer textarea');\n      }\n    }, 500);\n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('‚è≥ Waiting for answer...');\n\n    // Listen for answer\n    this.waitForAnswer();\n  }\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n\n    // Handle ICE candidates\n    this.localConnection.onicecandidate = event => {\n      if (event.candidate) {\n        console.log('üßä Guest ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('‚úÖ Guest ICE gathering complete');\n      }\n    };\n\n    // Wait for offer\n    console.log('üîç Looking for offer...');\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    console.log('üì• Offer received, setting as remote description...');\n    console.log('üìã Current signaling state:', this.localConnection.signalingState);\n    try {\n      await this.localConnection.setRemoteDescription(offerData.offer);\n      console.log('‚úÖ Remote description (offer) set successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to set remote description (offer):', error);\n      throw error;\n    }\n\n    // Listen for data channel from host\n    this.localConnection.ondatachannel = event => {\n      console.log('üì° Data channel received from host');\n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n    };\n\n    // Create answer\n    console.log('üìù Creating answer...');\n    const answer = await this.localConnection.createAnswer();\n    console.log('üí° Answer created:', answer);\n    await this.localConnection.setLocalDescription(answer);\n    console.log('‚úÖ Local description (answer) set successfully');\n\n    // Store answer using multiple methods\n    const answerData = {\n      type: 'answer',\n      sdp: answer.sdp\n    };\n    localStorage.setItem(`answer_${this.roomId}`, JSON.stringify(answerData));\n\n    // Global variable fallback\n    window.webrtcAnswers = window.webrtcAnswers || {};\n    window.webrtcAnswers[this.roomId] = answerData;\n    console.log('üíæ Answer stored with multiple methods');\n\n    // Auto-populate the answer textarea for manual copy/paste\n    setTimeout(() => {\n      const answerTextarea = document.getElementById('answerData');\n      if (answerTextarea) {\n        answerTextarea.value = JSON.stringify(answerData);\n        console.log('üìù Auto-populated answer textarea');\n      }\n    }, 100);\n    console.log('‚úÖ Guest setup complete');\n\n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    channel.onopen = () => {\n      console.log('üéâ DATA CHANNEL OPENED - CONNECTION ESTABLISHED!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    channel.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® Data received:', data.type);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('‚ùå Failed to parse received data:', error);\n      }\n    };\n    channel.onerror = error => {\n      console.error('‚ùå Data channel error:', error);\n    };\n  }\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 30;\n      this.offerPolling = setInterval(() => {\n        attempts++;\n        console.log(`üîç Looking for offer... attempt ${attempts}/${maxAttempts}`);\n\n        // Debug: Show all localStorage keys and global variables\n        const allKeys = Object.keys(localStorage);\n        const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n        console.log('üì¶ All localStorage keys:', allKeys.length);\n        console.log('üì¶ Room-specific keys:', roomKeys);\n        console.log('üåê Global offers:', window.webrtcOffers);\n\n        // Try multiple methods to find the offer\n        let offerData = null;\n\n        // Method 1: localStorage\n        const localStorageOffer = localStorage.getItem(`offer_${this.roomId}`);\n        if (localStorageOffer) {\n          console.log('‚úÖ Found offer in localStorage');\n          offerData = localStorageOffer;\n        }\n\n        // Method 2: Global variable\n        if (!offerData && window.webrtcOffers && window.webrtcOffers[this.roomId]) {\n          console.log('‚úÖ Found offer in global variable');\n          offerData = JSON.stringify(window.webrtcOffers[this.roomId]);\n        }\n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            console.log('üìÑ Found offer data:', parsed);\n\n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              clearInterval(this.offerPolling);\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n              if (window.webrtcOffers) {\n                delete window.webrtcOffers[this.roomId];\n              }\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to parse offer:', error);\n          }\n        } else {\n          console.log('‚ùå No offer found with any method');\n        }\n        if (attempts >= maxAttempts) {\n          clearInterval(this.offerPolling);\n          reject(new Error('Timeout waiting for offer'));\n        }\n      }, 1000);\n    });\n  }\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 30;\n    this.answerPolling = setInterval(async () => {\n      attempts++;\n      console.log(`üîç Looking for answer... attempt ${attempts}/${maxAttempts}`);\n\n      // Debug: Show localStorage and global variables\n      const allKeys = Object.keys(localStorage);\n      const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n      console.log('üì¶ Room-specific keys:', roomKeys);\n      console.log('üåê Global answers:', window.webrtcAnswers);\n\n      // Try multiple methods to find the answer\n      let answerData = null;\n\n      // Method 1: localStorage\n      const localStorageAnswer = localStorage.getItem(`answer_${this.roomId}`);\n      if (localStorageAnswer) {\n        console.log('‚úÖ Found answer in localStorage');\n        answerData = localStorageAnswer;\n      }\n\n      // Method 2: Global variable\n      if (!answerData && window.webrtcAnswers && window.webrtcAnswers[this.roomId]) {\n        console.log('‚úÖ Found answer in global variable');\n        answerData = JSON.stringify(window.webrtcAnswers[this.roomId]);\n      }\n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n          console.log('üìÑ Found answer data:', parsed);\n\n          // Check connection state before setting remote description\n          console.log('üìã Current signaling state:', this.localConnection.signalingState);\n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting as remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            clearInterval(this.answerPolling);\n            this.answerProcessed = true;\n\n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            console.log('‚úÖ Remote description (answer) set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Wrong signaling state for answer:', this.localConnection.signalingState);\n          }\n        } catch (error) {\n          console.error('‚ùå Failed to set remote description (answer):', error);\n          clearInterval(this.answerPolling);\n        }\n      } else {\n        console.log('‚ùå No answer found with any method');\n      }\n      if (attempts >= maxAttempts) {\n        clearInterval(this.answerPolling);\n        console.error('‚ùå Timeout waiting for answer');\n      }\n    }, 1000);\n  }\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n    console.log(`üíæ Stored ICE candidate for ${role}`);\n\n    // Update manual ICE fields\n    this.updateManualIceFields(role);\n  }\n  updateManualIceFields(role) {\n    setTimeout(() => {\n      const key = `ice_${this.roomId}_${role}`;\n      const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n      if (role === 'host') {\n        const hostTextarea = document.getElementById('hostIceCandidates');\n        if (hostTextarea && candidates.length > 0) {\n          hostTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated host ICE textarea with ${candidates.length} candidates`);\n        }\n      } else if (role === 'guest') {\n        const guestTextarea = document.getElementById('guestIceCandidates');\n        if (guestTextarea && candidates.length > 0) {\n          guestTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated guest ICE textarea with ${candidates.length} candidates`);\n        }\n      }\n    }, 100);\n  }\n  async processStoredIceCandidates(role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n\n    // Check connection state after processing ICE candidates\n    setTimeout(() => {\n      var _this$dataChannel;\n      console.log('üîç Current connection states:');\n      console.log('  - Connection state:', this.localConnection.connectionState);\n      console.log('  - ICE connection state:', this.localConnection.iceConnectionState);\n      console.log('  - Data channel state:', (_this$dataChannel = this.dataChannel) === null || _this$dataChannel === void 0 ? void 0 : _this$dataChannel.readyState);\n    }, 2000);\n  }\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('‚ùå Failed to send data:', error);\n      }\n    } else {\n      var _this$dataChannel2;\n      console.warn('‚ö†Ô∏è Data channel not ready, state:', ((_this$dataChannel2 = this.dataChannel) === null || _this$dataChannel2 === void 0 ? void 0 : _this$dataChannel2.readyState) || 'null');\n    }\n  }\n  cleanup() {\n    if (this.roomId) {\n      const keys = [`offer_${this.roomId}`, `answer_${this.roomId}`, `ice_${this.roomId}_host`, `ice_${this.roomId}_guest`];\n      keys.forEach(key => localStorage.removeItem(key));\n\n      // Clean global variables too\n      if (window.webrtcOffers) {\n        delete window.webrtcOffers[this.roomId];\n      }\n      if (window.webrtcAnswers) {\n        delete window.webrtcAnswers[this.roomId];\n      }\n      console.log('üßπ Cleaned up localStorage and global variables for room:', this.roomId);\n    }\n  }\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n\n    // Clear polling intervals\n    if (this.answerPolling) {\n      clearInterval(this.answerPolling);\n      this.answerPolling = null;\n    }\n    if (this.offerPolling) {\n      clearInterval(this.offerPolling);\n      this.offerPolling = null;\n    }\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\nexport default WebRTCManager;","map":{"version":3,"names":["WebRTCManager","constructor","localConnection","dataChannel","isHost","roomId","onDataReceived","onConnectionStateChange","isConnected","answerProcessed","offerProcessed","answerPolling","offerPolling","iceServers","urls","initialize","console","log","window","location","origin","cleanup","RTCPeerConnection","iceCandidatePoolSize","bundlePolicy","rtcpMuxPolicy","onconnectionstatechange","connectionState","connected","oniceconnectionstatechange","iceConnectionState","onicegatheringstatechange","iceGatheringState","onsignalingstatechange","signalingState","setupAsHost","setupAsGuest","error","createDataChannel","ordered","maxRetransmits","setupDataChannel","onicecandidate","event","candidate","storeIceCandidate","offer","createOffer","setLocalDescription","offerData","timestamp","Date","now","offerKey","localStorage","setItem","JSON","stringify","dispatchEvent","StorageEvent","key","newValue","url","href","webrtcOffers","getItem","setTimeout","offerTextarea","document","getElementById","value","waitForAnswer","waitForOffer","Error","setRemoteDescription","ondatachannel","channel","answer","createAnswer","answerData","type","sdp","webrtcAnswers","answerTextarea","processStoredIceCandidates","onopen","onclose","onmessage","data","parse","onerror","Promise","resolve","reject","attempts","maxAttempts","setInterval","allKeys","Object","keys","roomKeys","filter","k","includes","length","localStorageOffer","parsed","clearInterval","removeItem","localStorageAnswer","role","existing","push","updateManualIceFields","candidates","hostTextarea","guestTextarea","candidateData","addIceCandidate","_this$dataChannel","readyState","sendData","send","_this$dataChannel2","warn","forEach","disconnect","close"],"sources":["C:/Users/eniac/Desktop/wrtc/src/services/WebRTCManager.js"],"sourcesContent":["class WebRTCManager {\n  constructor() {\n    this.localConnection = null;\n    this.dataChannel = null;\n    this.isHost = false;\n    this.roomId = null;\n    this.onDataReceived = null;\n    this.onConnectionStateChange = null;\n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    this.answerPolling = null;\n    this.offerPolling = null;\n    \n    // Use Google's STUN servers for NAT traversal\n    this.iceServers = [\n      { urls: 'stun:stun.l.google.com:19302' },\n      { urls: 'stun:stun1.l.google.com:19302' },\n      { urls: 'stun:stun2.l.google.com:19302' }\n    ];\n  }\n\n  async initialize(roomId, isHost = false) {\n    this.roomId = roomId;\n    this.isHost = isHost;\n    \n    console.log(`üöÄ Initializing WebRTC - Room: ${roomId}, Role: ${isHost ? 'HOST' : 'GUEST'}`);\n    console.log('üåê Current origin:', window.location.origin);\n    \n    // Clear any existing data for this room first\n    this.cleanup();\n    \n    try {\n      // Create RTCPeerConnection with optimized configuration\n      this.localConnection = new RTCPeerConnection({\n        iceServers: this.iceServers,\n        iceCandidatePoolSize: 10,\n        bundlePolicy: 'max-bundle',\n        rtcpMuxPolicy: 'require'\n      });\n\n      // Set up comprehensive connection state monitoring\n      this.localConnection.onconnectionstatechange = () => {\n        console.log('üîÑ Connection state:', this.localConnection.connectionState);\n        const connected = this.localConnection.connectionState === 'connected';\n        this.isConnected = connected;\n        if (this.onConnectionStateChange) {\n          this.onConnectionStateChange(connected);\n        }\n      };\n\n      this.localConnection.oniceconnectionstatechange = () => {\n        console.log('üßä ICE connection state:', this.localConnection.iceConnectionState);\n      };\n\n      this.localConnection.onicegatheringstatechange = () => {\n        console.log('üì° ICE gathering state:', this.localConnection.iceGatheringState);\n      };\n\n      this.localConnection.onsignalingstatechange = () => {\n        console.log('üìã Signaling state:', this.localConnection.signalingState);\n      };\n\n      if (isHost) {\n        await this.setupAsHost();\n      } else {\n        await this.setupAsGuest();\n      }\n    } catch (error) {\n      console.error('‚ùå WebRTC initialization failed:', error);\n      throw error;\n    }\n  }\n\n  async setupAsHost() {\n    console.log('üîµ Setting up as HOST for room:', this.roomId);\n    \n    // Create data channel with optimized settings\n    this.dataChannel = this.localConnection.createDataChannel('whiteboard', {\n      ordered: true,  // Ensure drawing data arrives in order\n      maxRetransmits: 3\n    });\n    \n    this.setupDataChannel(this.dataChannel);\n    \n    // Handle ICE candidates\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('üßä Host ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'host');\n      } else {\n        console.log('‚úÖ Host ICE gathering complete');\n      }\n    };\n    \n    // Create offer\n    console.log('üìù Creating offer...');\n    const offer = await this.localConnection.createOffer();\n    await this.localConnection.setLocalDescription(offer);\n    \n    // Store offer in localStorage with multiple methods\n    const offerData = {\n      offer: offer,\n      timestamp: Date.now(),\n      roomId: this.roomId\n    };\n    \n    // Method 1: Standard localStorage\n    const offerKey = `offer_${this.roomId}`;\n    localStorage.setItem(offerKey, JSON.stringify(offerData));\n    \n    // Method 2: Force localStorage sync with storage event\n    window.dispatchEvent(new StorageEvent('storage', {\n      key: offerKey,\n      newValue: JSON.stringify(offerData),\n      url: window.location.href\n    }));\n    \n    // Method 3: Also store in global variable for same-page access\n    window.webrtcOffers = window.webrtcOffers || {};\n    window.webrtcOffers[this.roomId] = offerData;\n    \n    console.log('üíæ Offer stored with multiple methods:', offerData);\n    console.log('üîç Verifying storage immediately:');\n    console.log('  - localStorage:', localStorage.getItem(offerKey));\n    console.log('  - window.webrtcOffers:', window.webrtcOffers[this.roomId]);\n    \n    // Populate manual signaling field\n    setTimeout(() => {\n      const offerTextarea = document.getElementById('offerData');\n      if (offerTextarea) {\n        offerTextarea.value = JSON.stringify(offerData);\n        console.log('üìù Populated manual offer textarea');\n      }\n    }, 500);\n    \n    console.log('‚úÖ Host setup complete. Room ID:', this.roomId);\n    console.log('‚è≥ Waiting for answer...');\n    \n    // Listen for answer\n    this.waitForAnswer();\n  }\n\n  async setupAsGuest() {\n    console.log('üü¢ Setting up as GUEST for room:', this.roomId);\n    \n    // Handle ICE candidates\n    this.localConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log('üßä Guest ICE candidate generated');\n        this.storeIceCandidate(event.candidate, 'guest');\n      } else {\n        console.log('‚úÖ Guest ICE gathering complete');\n      }\n    };\n    \n    // Wait for offer\n    console.log('üîç Looking for offer...');\n    const offerData = await this.waitForOffer();\n    if (!offerData) {\n      throw new Error('No offer found for this room');\n    }\n    \n    console.log('üì• Offer received, setting as remote description...');\n    console.log('üìã Current signaling state:', this.localConnection.signalingState);\n    \n    try {\n      await this.localConnection.setRemoteDescription(offerData.offer);\n      console.log('‚úÖ Remote description (offer) set successfully');\n    } catch (error) {\n      console.error('‚ùå Failed to set remote description (offer):', error);\n      throw error;\n    }\n    \n    // Listen for data channel from host\n    this.localConnection.ondatachannel = (event) => {\n      console.log('üì° Data channel received from host');\n      this.dataChannel = event.channel;\n      this.setupDataChannel(this.dataChannel);\n    };\n    \n    // Create answer\n    console.log('üìù Creating answer...');\n    const answer = await this.localConnection.createAnswer();\n    console.log('üí° Answer created:', answer);\n    \n    await this.localConnection.setLocalDescription(answer);\n    console.log('‚úÖ Local description (answer) set successfully');\n    \n    // Store answer using multiple methods\n    const answerData = { type: 'answer', sdp: answer.sdp };\n    localStorage.setItem(`answer_${this.roomId}`, JSON.stringify(answerData));\n    \n    // Global variable fallback\n    window.webrtcAnswers = window.webrtcAnswers || {};\n    window.webrtcAnswers[this.roomId] = answerData;\n    \n    console.log('üíæ Answer stored with multiple methods');\n    \n    // Auto-populate the answer textarea for manual copy/paste\n    setTimeout(() => {\n      const answerTextarea = document.getElementById('answerData');\n      if (answerTextarea) {\n        answerTextarea.value = JSON.stringify(answerData);\n        console.log('üìù Auto-populated answer textarea');\n      }\n    }, 100);\n    \n    console.log('‚úÖ Guest setup complete');\n    \n    // Process stored ICE candidates from host\n    setTimeout(() => {\n      this.processStoredIceCandidates('host');\n    }, 1000);\n  }\n\n  setupDataChannel(channel) {\n    console.log('üîß Setting up data channel...');\n    \n    channel.onopen = () => {\n      console.log('üéâ DATA CHANNEL OPENED - CONNECTION ESTABLISHED!');\n      this.isConnected = true;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(true);\n      }\n    };\n    \n    channel.onclose = () => {\n      console.log('‚ùå Data channel closed');\n      this.isConnected = false;\n      if (this.onConnectionStateChange) {\n        this.onConnectionStateChange(false);\n      }\n    };\n    \n    channel.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('üì® Data received:', data.type);\n        if (this.onDataReceived) {\n          this.onDataReceived(data);\n        }\n      } catch (error) {\n        console.error('‚ùå Failed to parse received data:', error);\n      }\n    };\n    \n    channel.onerror = (error) => {\n      console.error('‚ùå Data channel error:', error);\n    };\n  }\n\n  async waitForOffer() {\n    return new Promise((resolve, reject) => {\n      let attempts = 0;\n      const maxAttempts = 30;\n      \n      this.offerPolling = setInterval(() => {\n        attempts++;\n        console.log(`üîç Looking for offer... attempt ${attempts}/${maxAttempts}`);\n        \n        // Debug: Show all localStorage keys and global variables\n        const allKeys = Object.keys(localStorage);\n        const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n        console.log('üì¶ All localStorage keys:', allKeys.length);\n        console.log('üì¶ Room-specific keys:', roomKeys);\n        console.log('üåê Global offers:', window.webrtcOffers);\n        \n        // Try multiple methods to find the offer\n        let offerData = null;\n        \n        // Method 1: localStorage\n        const localStorageOffer = localStorage.getItem(`offer_${this.roomId}`);\n        if (localStorageOffer) {\n          console.log('‚úÖ Found offer in localStorage');\n          offerData = localStorageOffer;\n        }\n        \n        // Method 2: Global variable\n        if (!offerData && window.webrtcOffers && window.webrtcOffers[this.roomId]) {\n          console.log('‚úÖ Found offer in global variable');\n          offerData = JSON.stringify(window.webrtcOffers[this.roomId]);\n        }\n        \n        if (offerData) {\n          try {\n            const parsed = JSON.parse(offerData);\n            console.log('üìÑ Found offer data:', parsed);\n            \n            // Check if offer is not too old (10 minutes)\n            if (Date.now() - parsed.timestamp < 600000) {\n              console.log('‚úÖ Valid offer found!');\n              clearInterval(this.offerPolling);\n              this.offerProcessed = true;\n              resolve(parsed);\n              return;\n            } else {\n              console.log('‚ùå Offer too old, removing...');\n              localStorage.removeItem(`offer_${this.roomId}`);\n              if (window.webrtcOffers) {\n                delete window.webrtcOffers[this.roomId];\n              }\n            }\n          } catch (error) {\n            console.error('‚ùå Failed to parse offer:', error);\n          }\n        } else {\n          console.log('‚ùå No offer found with any method');\n        }\n        \n        if (attempts >= maxAttempts) {\n          clearInterval(this.offerPolling);\n          reject(new Error('Timeout waiting for offer'));\n        }\n      }, 1000);\n    });\n  }\n\n  async waitForAnswer() {\n    let attempts = 0;\n    const maxAttempts = 30;\n    \n    this.answerPolling = setInterval(async () => {\n      attempts++;\n      console.log(`üîç Looking for answer... attempt ${attempts}/${maxAttempts}`);\n      \n      // Debug: Show localStorage and global variables\n      const allKeys = Object.keys(localStorage);\n      const roomKeys = allKeys.filter(k => k.includes(this.roomId));\n      console.log('üì¶ Room-specific keys:', roomKeys);\n      console.log('üåê Global answers:', window.webrtcAnswers);\n      \n      // Try multiple methods to find the answer\n      let answerData = null;\n      \n      // Method 1: localStorage\n      const localStorageAnswer = localStorage.getItem(`answer_${this.roomId}`);\n      if (localStorageAnswer) {\n        console.log('‚úÖ Found answer in localStorage');\n        answerData = localStorageAnswer;\n      }\n      \n      // Method 2: Global variable\n      if (!answerData && window.webrtcAnswers && window.webrtcAnswers[this.roomId]) {\n        console.log('‚úÖ Found answer in global variable');\n        answerData = JSON.stringify(window.webrtcAnswers[this.roomId]);\n      }\n      \n      if (answerData) {\n        try {\n          const parsed = JSON.parse(answerData);\n          console.log('üìÑ Found answer data:', parsed);\n          \n          // Check connection state before setting remote description\n          console.log('üìã Current signaling state:', this.localConnection.signalingState);\n          \n          if (this.localConnection.signalingState === 'have-local-offer') {\n            console.log('‚úÖ Answer received, setting as remote description...');\n            await this.localConnection.setRemoteDescription(parsed.answer);\n            \n            clearInterval(this.answerPolling);\n            this.answerProcessed = true;\n            \n            // Process guest ICE candidates\n            setTimeout(() => {\n              this.processStoredIceCandidates('guest');\n            }, 1000);\n            \n            console.log('‚úÖ Remote description (answer) set successfully');\n            return;\n          } else {\n            console.log('‚ö†Ô∏è Wrong signaling state for answer:', this.localConnection.signalingState);\n          }\n        } catch (error) {\n          console.error('‚ùå Failed to set remote description (answer):', error);\n          clearInterval(this.answerPolling);\n        }\n      } else {\n        console.log('‚ùå No answer found with any method');\n      }\n      \n      if (attempts >= maxAttempts) {\n        clearInterval(this.answerPolling);\n        console.error('‚ùå Timeout waiting for answer');\n      }\n    }, 1000);\n  }\n\n  storeIceCandidate(candidate, role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const existing = JSON.parse(localStorage.getItem(key) || '[]');\n    existing.push({\n      candidate: candidate,\n      timestamp: Date.now()\n    });\n    localStorage.setItem(key, JSON.stringify(existing));\n    console.log(`üíæ Stored ICE candidate for ${role}`);\n    \n    // Update manual ICE fields\n    this.updateManualIceFields(role);\n  }\n\n  updateManualIceFields(role) {\n    setTimeout(() => {\n      const key = `ice_${this.roomId}_${role}`;\n      const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n      \n      if (role === 'host') {\n        const hostTextarea = document.getElementById('hostIceCandidates');\n        if (hostTextarea && candidates.length > 0) {\n          hostTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated host ICE textarea with ${candidates.length} candidates`);\n        }\n      } else if (role === 'guest') {\n        const guestTextarea = document.getElementById('guestIceCandidates');\n        if (guestTextarea && candidates.length > 0) {\n          guestTextarea.value = JSON.stringify(candidates);\n          console.log(`üìù Updated guest ICE textarea with ${candidates.length} candidates`);\n        }\n      }\n    }, 100);\n  }\n\n  async processStoredIceCandidates(role) {\n    const key = `ice_${this.roomId}_${role}`;\n    const candidates = JSON.parse(localStorage.getItem(key) || '[]');\n    \n    console.log(`üßä Processing ${candidates.length} ICE candidates for ${role}`);\n    \n    for (const candidateData of candidates) {\n      try {\n        if (this.localConnection.signalingState !== 'closed') {\n          await this.localConnection.addIceCandidate(candidateData.candidate);\n          console.log(`‚úÖ Added ICE candidate for ${role}`);\n        }\n      } catch (error) {\n        console.error(`‚ùå Failed to add ICE candidate for ${role}:`, error);\n      }\n    }\n    \n    // Check connection state after processing ICE candidates\n    setTimeout(() => {\n      console.log('üîç Current connection states:');\n      console.log('  - Connection state:', this.localConnection.connectionState);\n      console.log('  - ICE connection state:', this.localConnection.iceConnectionState);\n      console.log('  - Data channel state:', this.dataChannel?.readyState);\n    }, 2000);\n  }\n\n  sendData(data) {\n    if (this.dataChannel && this.dataChannel.readyState === 'open') {\n      try {\n        this.dataChannel.send(JSON.stringify(data));\n      } catch (error) {\n        console.error('‚ùå Failed to send data:', error);\n      }\n    } else {\n      console.warn('‚ö†Ô∏è Data channel not ready, state:', this.dataChannel?.readyState || 'null');\n    }\n  }\n\n  cleanup() {\n    if (this.roomId) {\n      const keys = [`offer_${this.roomId}`, `answer_${this.roomId}`, `ice_${this.roomId}_host`, `ice_${this.roomId}_guest`];\n      keys.forEach(key => localStorage.removeItem(key));\n      \n      // Clean global variables too\n      if (window.webrtcOffers) {\n        delete window.webrtcOffers[this.roomId];\n      }\n      if (window.webrtcAnswers) {\n        delete window.webrtcAnswers[this.roomId];\n      }\n      \n      console.log('üßπ Cleaned up localStorage and global variables for room:', this.roomId);\n    }\n  }\n\n  disconnect() {\n    console.log('üîå Disconnecting WebRTC...');\n    \n    // Clear polling intervals\n    if (this.answerPolling) {\n      clearInterval(this.answerPolling);\n      this.answerPolling = null;\n    }\n    if (this.offerPolling) {\n      clearInterval(this.offerPolling);\n      this.offerPolling = null;\n    }\n    \n    this.isConnected = false;\n    this.answerProcessed = false;\n    this.offerProcessed = false;\n    \n    if (this.dataChannel) {\n      this.dataChannel.close();\n    }\n    if (this.localConnection) {\n      this.localConnection.close();\n    }\n    \n    this.cleanup();\n    console.log('‚úÖ Disconnection complete');\n  }\n}\n\nexport default WebRTCManager; "],"mappings":"AAAA,MAAMA,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,uBAAuB,GAAG,IAAI;IACnC,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,cAAc,GAAG,KAAK;IAC3B,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,YAAY,GAAG,IAAI;;IAExB;IACA,IAAI,CAACC,UAAU,GAAG,CAChB;MAAEC,IAAI,EAAE;IAA+B,CAAC,EACxC;MAAEA,IAAI,EAAE;IAAgC,CAAC,EACzC;MAAEA,IAAI,EAAE;IAAgC,CAAC,CAC1C;EACH;EAEA,MAAMC,UAAUA,CAACV,MAAM,EAAED,MAAM,GAAG,KAAK,EAAE;IACvC,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACD,MAAM,GAAGA,MAAM;IAEpBY,OAAO,CAACC,GAAG,CAAC,kCAAkCZ,MAAM,WAAWD,MAAM,GAAG,MAAM,GAAG,OAAO,EAAE,CAAC;IAC3FY,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;;IAEzD;IACA,IAAI,CAACC,OAAO,CAAC,CAAC;IAEd,IAAI;MACF;MACA,IAAI,CAACnB,eAAe,GAAG,IAAIoB,iBAAiB,CAAC;QAC3CT,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BU,oBAAoB,EAAE,EAAE;QACxBC,YAAY,EAAE,YAAY;QAC1BC,aAAa,EAAE;MACjB,CAAC,CAAC;;MAEF;MACA,IAAI,CAACvB,eAAe,CAACwB,uBAAuB,GAAG,MAAM;QACnDV,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,IAAI,CAACf,eAAe,CAACyB,eAAe,CAAC;QACzE,MAAMC,SAAS,GAAG,IAAI,CAAC1B,eAAe,CAACyB,eAAe,KAAK,WAAW;QACtE,IAAI,CAACnB,WAAW,GAAGoB,SAAS;QAC5B,IAAI,IAAI,CAACrB,uBAAuB,EAAE;UAChC,IAAI,CAACA,uBAAuB,CAACqB,SAAS,CAAC;QACzC;MACF,CAAC;MAED,IAAI,CAAC1B,eAAe,CAAC2B,0BAA0B,GAAG,MAAM;QACtDb,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAE,IAAI,CAACf,eAAe,CAAC4B,kBAAkB,CAAC;MAClF,CAAC;MAED,IAAI,CAAC5B,eAAe,CAAC6B,yBAAyB,GAAG,MAAM;QACrDf,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAACf,eAAe,CAAC8B,iBAAiB,CAAC;MAChF,CAAC;MAED,IAAI,CAAC9B,eAAe,CAAC+B,sBAAsB,GAAG,MAAM;QAClDjB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACf,eAAe,CAACgC,cAAc,CAAC;MACzE,CAAC;MAED,IAAI9B,MAAM,EAAE;QACV,MAAM,IAAI,CAAC+B,WAAW,CAAC,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;MAC3B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdrB,OAAO,CAACqB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMF,WAAWA,CAAA,EAAG;IAClBnB,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE,IAAI,CAACZ,MAAM,CAAC;;IAE3D;IACA,IAAI,CAACF,WAAW,GAAG,IAAI,CAACD,eAAe,CAACoC,iBAAiB,CAAC,YAAY,EAAE;MACtEC,OAAO,EAAE,IAAI;MAAG;MAChBC,cAAc,EAAE;IAClB,CAAC,CAAC;IAEF,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACtC,WAAW,CAAC;;IAEvC;IACA,IAAI,CAACD,eAAe,CAACwC,cAAc,GAAIC,KAAK,IAAK;MAC/C,IAAIA,KAAK,CAACC,SAAS,EAAE;QACnB5B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,IAAI,CAAC4B,iBAAiB,CAACF,KAAK,CAACC,SAAS,EAAE,MAAM,CAAC;MACjD,CAAC,MAAM;QACL5B,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC9C;IACF,CAAC;;IAED;IACAD,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAM6B,KAAK,GAAG,MAAM,IAAI,CAAC5C,eAAe,CAAC6C,WAAW,CAAC,CAAC;IACtD,MAAM,IAAI,CAAC7C,eAAe,CAAC8C,mBAAmB,CAACF,KAAK,CAAC;;IAErD;IACA,MAAMG,SAAS,GAAG;MAChBH,KAAK,EAAEA,KAAK;MACZI,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrB/C,MAAM,EAAE,IAAI,CAACA;IACf,CAAC;;IAED;IACA,MAAMgD,QAAQ,GAAG,SAAS,IAAI,CAAChD,MAAM,EAAE;IACvCiD,YAAY,CAACC,OAAO,CAACF,QAAQ,EAAEG,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC,CAAC;;IAEzD;IACA/B,MAAM,CAACwC,aAAa,CAAC,IAAIC,YAAY,CAAC,SAAS,EAAE;MAC/CC,GAAG,EAAEP,QAAQ;MACbQ,QAAQ,EAAEL,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC;MACnCa,GAAG,EAAE5C,MAAM,CAACC,QAAQ,CAAC4C;IACvB,CAAC,CAAC,CAAC;;IAEH;IACA7C,MAAM,CAAC8C,YAAY,GAAG9C,MAAM,CAAC8C,YAAY,IAAI,CAAC,CAAC;IAC/C9C,MAAM,CAAC8C,YAAY,CAAC,IAAI,CAAC3D,MAAM,CAAC,GAAG4C,SAAS;IAE5CjC,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEgC,SAAS,CAAC;IAChEjC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEqC,YAAY,CAACW,OAAO,CAACZ,QAAQ,CAAC,CAAC;IAChErC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEC,MAAM,CAAC8C,YAAY,CAAC,IAAI,CAAC3D,MAAM,CAAC,CAAC;;IAEzE;IACA6D,UAAU,CAAC,MAAM;MACf,MAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;MAC1D,IAAIF,aAAa,EAAE;QACjBA,aAAa,CAACG,KAAK,GAAGd,IAAI,CAACC,SAAS,CAACR,SAAS,CAAC;QAC/CjC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACnD;IACF,CAAC,EAAE,GAAG,CAAC;IAEPD,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE,IAAI,CAACZ,MAAM,CAAC;IAC3DW,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;IAEtC;IACA,IAAI,CAACsD,aAAa,CAAC,CAAC;EACtB;EAEA,MAAMnC,YAAYA,CAAA,EAAG;IACnBpB,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAE,IAAI,CAACZ,MAAM,CAAC;;IAE5D;IACA,IAAI,CAACH,eAAe,CAACwC,cAAc,GAAIC,KAAK,IAAK;MAC/C,IAAIA,KAAK,CAACC,SAAS,EAAE;QACnB5B,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC/C,IAAI,CAAC4B,iBAAiB,CAACF,KAAK,CAACC,SAAS,EAAE,OAAO,CAAC;MAClD,CAAC,MAAM;QACL5B,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C;IACF,CAAC;;IAED;IACAD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,MAAMgC,SAAS,GAAG,MAAM,IAAI,CAACuB,YAAY,CAAC,CAAC;IAC3C,IAAI,CAACvB,SAAS,EAAE;MACd,MAAM,IAAIwB,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEAzD,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;IAClED,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACf,eAAe,CAACgC,cAAc,CAAC;IAE/E,IAAI;MACF,MAAM,IAAI,CAAChC,eAAe,CAACwE,oBAAoB,CAACzB,SAAS,CAACH,KAAK,CAAC;MAChE9B,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;IAC9D,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdrB,OAAO,CAACqB,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;MACnE,MAAMA,KAAK;IACb;;IAEA;IACA,IAAI,CAACnC,eAAe,CAACyE,aAAa,GAAIhC,KAAK,IAAK;MAC9C3B,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD,IAAI,CAACd,WAAW,GAAGwC,KAAK,CAACiC,OAAO;MAChC,IAAI,CAACnC,gBAAgB,CAAC,IAAI,CAACtC,WAAW,CAAC;IACzC,CAAC;;IAED;IACAa,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC,MAAM4D,MAAM,GAAG,MAAM,IAAI,CAAC3E,eAAe,CAAC4E,YAAY,CAAC,CAAC;IACxD9D,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE4D,MAAM,CAAC;IAEzC,MAAM,IAAI,CAAC3E,eAAe,CAAC8C,mBAAmB,CAAC6B,MAAM,CAAC;IACtD7D,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;;IAE5D;IACA,MAAM8D,UAAU,GAAG;MAAEC,IAAI,EAAE,QAAQ;MAAEC,GAAG,EAAEJ,MAAM,CAACI;IAAI,CAAC;IACtD3B,YAAY,CAACC,OAAO,CAAC,UAAU,IAAI,CAAClD,MAAM,EAAE,EAAEmD,IAAI,CAACC,SAAS,CAACsB,UAAU,CAAC,CAAC;;IAEzE;IACA7D,MAAM,CAACgE,aAAa,GAAGhE,MAAM,CAACgE,aAAa,IAAI,CAAC,CAAC;IACjDhE,MAAM,CAACgE,aAAa,CAAC,IAAI,CAAC7E,MAAM,CAAC,GAAG0E,UAAU;IAE9C/D,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;;IAErD;IACAiD,UAAU,CAAC,MAAM;MACf,MAAMiB,cAAc,GAAGf,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;MAC5D,IAAIc,cAAc,EAAE;QAClBA,cAAc,CAACb,KAAK,GAAGd,IAAI,CAACC,SAAS,CAACsB,UAAU,CAAC;QACjD/D,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAClD;IACF,CAAC,EAAE,GAAG,CAAC;IAEPD,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;IAErC;IACAiD,UAAU,CAAC,MAAM;MACf,IAAI,CAACkB,0BAA0B,CAAC,MAAM,CAAC;IACzC,CAAC,EAAE,IAAI,CAAC;EACV;EAEA3C,gBAAgBA,CAACmC,OAAO,EAAE;IACxB5D,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAE5C2D,OAAO,CAACS,MAAM,GAAG,MAAM;MACrBrE,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MAC/D,IAAI,CAACT,WAAW,GAAG,IAAI;MACvB,IAAI,IAAI,CAACD,uBAAuB,EAAE;QAChC,IAAI,CAACA,uBAAuB,CAAC,IAAI,CAAC;MACpC;IACF,CAAC;IAEDqE,OAAO,CAACU,OAAO,GAAG,MAAM;MACtBtE,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,IAAI,CAACT,WAAW,GAAG,KAAK;MACxB,IAAI,IAAI,CAACD,uBAAuB,EAAE;QAChC,IAAI,CAACA,uBAAuB,CAAC,KAAK,CAAC;MACrC;IACF,CAAC;IAEDqE,OAAO,CAACW,SAAS,GAAI5C,KAAK,IAAK;MAC7B,IAAI;QACF,MAAM6C,IAAI,GAAGhC,IAAI,CAACiC,KAAK,CAAC9C,KAAK,CAAC6C,IAAI,CAAC;QACnCxE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEuE,IAAI,CAACR,IAAI,CAAC;QAC3C,IAAI,IAAI,CAAC1E,cAAc,EAAE;UACvB,IAAI,CAACA,cAAc,CAACkF,IAAI,CAAC;QAC3B;MACF,CAAC,CAAC,OAAOnD,KAAK,EAAE;QACdrB,OAAO,CAACqB,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDuC,OAAO,CAACc,OAAO,GAAIrD,KAAK,IAAK;MAC3BrB,OAAO,CAACqB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC;EACH;EAEA,MAAMmC,YAAYA,CAAA,EAAG;IACnB,OAAO,IAAImB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAIC,QAAQ,GAAG,CAAC;MAChB,MAAMC,WAAW,GAAG,EAAE;MAEtB,IAAI,CAACnF,YAAY,GAAGoF,WAAW,CAAC,MAAM;QACpCF,QAAQ,EAAE;QACV9E,OAAO,CAACC,GAAG,CAAC,mCAAmC6E,QAAQ,IAAIC,WAAW,EAAE,CAAC;;QAEzE;QACA,MAAME,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC7C,YAAY,CAAC;QACzC,MAAM8C,QAAQ,GAAGH,OAAO,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAClG,MAAM,CAAC,CAAC;QAC7DW,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEgF,OAAO,CAACO,MAAM,CAAC;QACxDxF,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEmF,QAAQ,CAAC;QAC/CpF,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEC,MAAM,CAAC8C,YAAY,CAAC;;QAErD;QACA,IAAIf,SAAS,GAAG,IAAI;;QAEpB;QACA,MAAMwD,iBAAiB,GAAGnD,YAAY,CAACW,OAAO,CAAC,SAAS,IAAI,CAAC5D,MAAM,EAAE,CAAC;QACtE,IAAIoG,iBAAiB,EAAE;UACrBzF,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;UAC5CgC,SAAS,GAAGwD,iBAAiB;QAC/B;;QAEA;QACA,IAAI,CAACxD,SAAS,IAAI/B,MAAM,CAAC8C,YAAY,IAAI9C,MAAM,CAAC8C,YAAY,CAAC,IAAI,CAAC3D,MAAM,CAAC,EAAE;UACzEW,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;UAC/CgC,SAAS,GAAGO,IAAI,CAACC,SAAS,CAACvC,MAAM,CAAC8C,YAAY,CAAC,IAAI,CAAC3D,MAAM,CAAC,CAAC;QAC9D;QAEA,IAAI4C,SAAS,EAAE;UACb,IAAI;YACF,MAAMyD,MAAM,GAAGlD,IAAI,CAACiC,KAAK,CAACxC,SAAS,CAAC;YACpCjC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEyF,MAAM,CAAC;;YAE3C;YACA,IAAIvD,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGsD,MAAM,CAACxD,SAAS,GAAG,MAAM,EAAE;cAC1ClC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;cACnC0F,aAAa,CAAC,IAAI,CAAC/F,YAAY,CAAC;cAChC,IAAI,CAACF,cAAc,GAAG,IAAI;cAC1BkF,OAAO,CAACc,MAAM,CAAC;cACf;YACF,CAAC,MAAM;cACL1F,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;cAC3CqC,YAAY,CAACsD,UAAU,CAAC,SAAS,IAAI,CAACvG,MAAM,EAAE,CAAC;cAC/C,IAAIa,MAAM,CAAC8C,YAAY,EAAE;gBACvB,OAAO9C,MAAM,CAAC8C,YAAY,CAAC,IAAI,CAAC3D,MAAM,CAAC;cACzC;YACF;UACF,CAAC,CAAC,OAAOgC,KAAK,EAAE;YACdrB,OAAO,CAACqB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAClD;QACF,CAAC,MAAM;UACLrB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QACjD;QAEA,IAAI6E,QAAQ,IAAIC,WAAW,EAAE;UAC3BY,aAAa,CAAC,IAAI,CAAC/F,YAAY,CAAC;UAChCiF,MAAM,CAAC,IAAIpB,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAChD;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,CAAC;EACJ;EAEA,MAAMF,aAAaA,CAAA,EAAG;IACpB,IAAIuB,QAAQ,GAAG,CAAC;IAChB,MAAMC,WAAW,GAAG,EAAE;IAEtB,IAAI,CAACpF,aAAa,GAAGqF,WAAW,CAAC,YAAY;MAC3CF,QAAQ,EAAE;MACV9E,OAAO,CAACC,GAAG,CAAC,oCAAoC6E,QAAQ,IAAIC,WAAW,EAAE,CAAC;;MAE1E;MACA,MAAME,OAAO,GAAGC,MAAM,CAACC,IAAI,CAAC7C,YAAY,CAAC;MACzC,MAAM8C,QAAQ,GAAGH,OAAO,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,IAAI,CAAClG,MAAM,CAAC,CAAC;MAC7DW,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEmF,QAAQ,CAAC;MAC/CpF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,MAAM,CAACgE,aAAa,CAAC;;MAEvD;MACA,IAAIH,UAAU,GAAG,IAAI;;MAErB;MACA,MAAM8B,kBAAkB,GAAGvD,YAAY,CAACW,OAAO,CAAC,UAAU,IAAI,CAAC5D,MAAM,EAAE,CAAC;MACxE,IAAIwG,kBAAkB,EAAE;QACtB7F,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;QAC7C8D,UAAU,GAAG8B,kBAAkB;MACjC;;MAEA;MACA,IAAI,CAAC9B,UAAU,IAAI7D,MAAM,CAACgE,aAAa,IAAIhE,MAAM,CAACgE,aAAa,CAAC,IAAI,CAAC7E,MAAM,CAAC,EAAE;QAC5EW,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChD8D,UAAU,GAAGvB,IAAI,CAACC,SAAS,CAACvC,MAAM,CAACgE,aAAa,CAAC,IAAI,CAAC7E,MAAM,CAAC,CAAC;MAChE;MAEA,IAAI0E,UAAU,EAAE;QACd,IAAI;UACF,MAAM2B,MAAM,GAAGlD,IAAI,CAACiC,KAAK,CAACV,UAAU,CAAC;UACrC/D,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEyF,MAAM,CAAC;;UAE5C;UACA1F,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACf,eAAe,CAACgC,cAAc,CAAC;UAE/E,IAAI,IAAI,CAAChC,eAAe,CAACgC,cAAc,KAAK,kBAAkB,EAAE;YAC9DlB,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;YAClE,MAAM,IAAI,CAACf,eAAe,CAACwE,oBAAoB,CAACgC,MAAM,CAAC7B,MAAM,CAAC;YAE9D8B,aAAa,CAAC,IAAI,CAAChG,aAAa,CAAC;YACjC,IAAI,CAACF,eAAe,GAAG,IAAI;;YAE3B;YACAyD,UAAU,CAAC,MAAM;cACf,IAAI,CAACkB,0BAA0B,CAAC,OAAO,CAAC;YAC1C,CAAC,EAAE,IAAI,CAAC;YAERpE,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;YAC7D;UACF,CAAC,MAAM;YACLD,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE,IAAI,CAACf,eAAe,CAACgC,cAAc,CAAC;UAC1F;QACF,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdrB,OAAO,CAACqB,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;UACpEsE,aAAa,CAAC,IAAI,CAAChG,aAAa,CAAC;QACnC;MACF,CAAC,MAAM;QACLK,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAClD;MAEA,IAAI6E,QAAQ,IAAIC,WAAW,EAAE;QAC3BY,aAAa,CAAC,IAAI,CAAChG,aAAa,CAAC;QACjCK,OAAO,CAACqB,KAAK,CAAC,8BAA8B,CAAC;MAC/C;IACF,CAAC,EAAE,IAAI,CAAC;EACV;EAEAQ,iBAAiBA,CAACD,SAAS,EAAEkE,IAAI,EAAE;IACjC,MAAMlD,GAAG,GAAG,OAAO,IAAI,CAACvD,MAAM,IAAIyG,IAAI,EAAE;IACxC,MAAMC,QAAQ,GAAGvD,IAAI,CAACiC,KAAK,CAACnC,YAAY,CAACW,OAAO,CAACL,GAAG,CAAC,IAAI,IAAI,CAAC;IAC9DmD,QAAQ,CAACC,IAAI,CAAC;MACZpE,SAAS,EAAEA,SAAS;MACpBM,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;IACtB,CAAC,CAAC;IACFE,YAAY,CAACC,OAAO,CAACK,GAAG,EAAEJ,IAAI,CAACC,SAAS,CAACsD,QAAQ,CAAC,CAAC;IACnD/F,OAAO,CAACC,GAAG,CAAC,+BAA+B6F,IAAI,EAAE,CAAC;;IAElD;IACA,IAAI,CAACG,qBAAqB,CAACH,IAAI,CAAC;EAClC;EAEAG,qBAAqBA,CAACH,IAAI,EAAE;IAC1B5C,UAAU,CAAC,MAAM;MACf,MAAMN,GAAG,GAAG,OAAO,IAAI,CAACvD,MAAM,IAAIyG,IAAI,EAAE;MACxC,MAAMI,UAAU,GAAG1D,IAAI,CAACiC,KAAK,CAACnC,YAAY,CAACW,OAAO,CAACL,GAAG,CAAC,IAAI,IAAI,CAAC;MAEhE,IAAIkD,IAAI,KAAK,MAAM,EAAE;QACnB,MAAMK,YAAY,GAAG/C,QAAQ,CAACC,cAAc,CAAC,mBAAmB,CAAC;QACjE,IAAI8C,YAAY,IAAID,UAAU,CAACV,MAAM,GAAG,CAAC,EAAE;UACzCW,YAAY,CAAC7C,KAAK,GAAGd,IAAI,CAACC,SAAS,CAACyD,UAAU,CAAC;UAC/ClG,OAAO,CAACC,GAAG,CAAC,qCAAqCiG,UAAU,CAACV,MAAM,aAAa,CAAC;QAClF;MACF,CAAC,MAAM,IAAIM,IAAI,KAAK,OAAO,EAAE;QAC3B,MAAMM,aAAa,GAAGhD,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;QACnE,IAAI+C,aAAa,IAAIF,UAAU,CAACV,MAAM,GAAG,CAAC,EAAE;UAC1CY,aAAa,CAAC9C,KAAK,GAAGd,IAAI,CAACC,SAAS,CAACyD,UAAU,CAAC;UAChDlG,OAAO,CAACC,GAAG,CAAC,sCAAsCiG,UAAU,CAACV,MAAM,aAAa,CAAC;QACnF;MACF;IACF,CAAC,EAAE,GAAG,CAAC;EACT;EAEA,MAAMpB,0BAA0BA,CAAC0B,IAAI,EAAE;IACrC,MAAMlD,GAAG,GAAG,OAAO,IAAI,CAACvD,MAAM,IAAIyG,IAAI,EAAE;IACxC,MAAMI,UAAU,GAAG1D,IAAI,CAACiC,KAAK,CAACnC,YAAY,CAACW,OAAO,CAACL,GAAG,CAAC,IAAI,IAAI,CAAC;IAEhE5C,OAAO,CAACC,GAAG,CAAC,iBAAiBiG,UAAU,CAACV,MAAM,uBAAuBM,IAAI,EAAE,CAAC;IAE5E,KAAK,MAAMO,aAAa,IAAIH,UAAU,EAAE;MACtC,IAAI;QACF,IAAI,IAAI,CAAChH,eAAe,CAACgC,cAAc,KAAK,QAAQ,EAAE;UACpD,MAAM,IAAI,CAAChC,eAAe,CAACoH,eAAe,CAACD,aAAa,CAACzE,SAAS,CAAC;UACnE5B,OAAO,CAACC,GAAG,CAAC,6BAA6B6F,IAAI,EAAE,CAAC;QAClD;MACF,CAAC,CAAC,OAAOzE,KAAK,EAAE;QACdrB,OAAO,CAACqB,KAAK,CAAC,qCAAqCyE,IAAI,GAAG,EAAEzE,KAAK,CAAC;MACpE;IACF;;IAEA;IACA6B,UAAU,CAAC,MAAM;MAAA,IAAAqD,iBAAA;MACfvG,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5CD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAE,IAAI,CAACf,eAAe,CAACyB,eAAe,CAAC;MAC1EX,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAACf,eAAe,CAAC4B,kBAAkB,CAAC;MACjFd,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAAsG,iBAAA,GAAE,IAAI,CAACpH,WAAW,cAAAoH,iBAAA,uBAAhBA,iBAAA,CAAkBC,UAAU,CAAC;IACtE,CAAC,EAAE,IAAI,CAAC;EACV;EAEAC,QAAQA,CAACjC,IAAI,EAAE;IACb,IAAI,IAAI,CAACrF,WAAW,IAAI,IAAI,CAACA,WAAW,CAACqH,UAAU,KAAK,MAAM,EAAE;MAC9D,IAAI;QACF,IAAI,CAACrH,WAAW,CAACuH,IAAI,CAAClE,IAAI,CAACC,SAAS,CAAC+B,IAAI,CAAC,CAAC;MAC7C,CAAC,CAAC,OAAOnD,KAAK,EAAE;QACdrB,OAAO,CAACqB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC,MAAM;MAAA,IAAAsF,kBAAA;MACL3G,OAAO,CAAC4G,IAAI,CAAC,mCAAmC,EAAE,EAAAD,kBAAA,OAAI,CAACxH,WAAW,cAAAwH,kBAAA,uBAAhBA,kBAAA,CAAkBH,UAAU,KAAI,MAAM,CAAC;IAC3F;EACF;EAEAnG,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAAChB,MAAM,EAAE;MACf,MAAM8F,IAAI,GAAG,CAAC,SAAS,IAAI,CAAC9F,MAAM,EAAE,EAAE,UAAU,IAAI,CAACA,MAAM,EAAE,EAAE,OAAO,IAAI,CAACA,MAAM,OAAO,EAAE,OAAO,IAAI,CAACA,MAAM,QAAQ,CAAC;MACrH8F,IAAI,CAAC0B,OAAO,CAACjE,GAAG,IAAIN,YAAY,CAACsD,UAAU,CAAChD,GAAG,CAAC,CAAC;;MAEjD;MACA,IAAI1C,MAAM,CAAC8C,YAAY,EAAE;QACvB,OAAO9C,MAAM,CAAC8C,YAAY,CAAC,IAAI,CAAC3D,MAAM,CAAC;MACzC;MACA,IAAIa,MAAM,CAACgE,aAAa,EAAE;QACxB,OAAOhE,MAAM,CAACgE,aAAa,CAAC,IAAI,CAAC7E,MAAM,CAAC;MAC1C;MAEAW,OAAO,CAACC,GAAG,CAAC,2DAA2D,EAAE,IAAI,CAACZ,MAAM,CAAC;IACvF;EACF;EAEAyH,UAAUA,CAAA,EAAG;IACX9G,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;;IAEzC;IACA,IAAI,IAAI,CAACN,aAAa,EAAE;MACtBgG,aAAa,CAAC,IAAI,CAAChG,aAAa,CAAC;MACjC,IAAI,CAACA,aAAa,GAAG,IAAI;IAC3B;IACA,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB+F,aAAa,CAAC,IAAI,CAAC/F,YAAY,CAAC;MAChC,IAAI,CAACA,YAAY,GAAG,IAAI;IAC1B;IAEA,IAAI,CAACJ,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,cAAc,GAAG,KAAK;IAE3B,IAAI,IAAI,CAACP,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAAC4H,KAAK,CAAC,CAAC;IAC1B;IACA,IAAI,IAAI,CAAC7H,eAAe,EAAE;MACxB,IAAI,CAACA,eAAe,CAAC6H,KAAK,CAAC,CAAC;IAC9B;IAEA,IAAI,CAAC1G,OAAO,CAAC,CAAC;IACdL,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EACzC;AACF;AAEA,eAAejB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}