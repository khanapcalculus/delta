{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eniac\\\\Desktop\\\\wrtc\\\\src\\\\components\\\\Whiteboard.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Layer, Line, Stage } from 'react-konva';\nimport Toolbar from './Toolbar';\n// import PageManager from './PageManager';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Whiteboard = ({\n  webrtcManager\n}) => {\n  _s();\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [strokeWidth, setStrokeWidth] = useState(2);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [drawingData, setDrawingData] = useState([[]]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n  const [liveStrokes, setLiveStrokes] = useState(new Map()); // Track live strokes from remote users\n  const stageRef = useRef();\n  const handleRemoteDrawing = useCallback(data => {\n    if (data.type === 'drawing') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        while (newData.length <= data.page) {\n          newData.push([]);\n        }\n        newData[data.page] = [...newData[data.page], data.stroke];\n        return newData;\n      });\n    } else if (data.type === 'clear') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        if (newData[data.page]) {\n          newData[data.page] = [];\n        }\n        return newData;\n      });\n    } else if (data.type === 'pageChange') {\n      setTotalPages(prev => Math.max(prev, data.totalPages));\n    }\n  }, []);\n\n  // Set up WebRTC data handling\n  useEffect(() => {\n    if (webrtcManager) {\n      webrtcManager.onDataReceived = handleRemoteDrawing;\n    }\n  }, [webrtcManager, handleRemoteDrawing]);\n  const handleLocalDrawing = useCallback(stroke => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'drawing',\n        stroke: stroke,\n        page: currentPage\n      });\n    }\n    setDrawingData(prev => {\n      const newData = [...prev];\n      while (newData.length <= currentPage) {\n        newData.push([]);\n      }\n      newData[currentPage] = [...newData[currentPage], stroke];\n      return newData;\n    });\n  }, [webrtcManager, currentPage]);\n  const handleClearPage = useCallback(() => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'clear',\n        page: currentPage\n      });\n    }\n    setDrawingData(prev => {\n      const newData = [...prev];\n      if (newData[currentPage]) {\n        newData[currentPage] = [];\n      }\n      return newData;\n    });\n  }, [webrtcManager, currentPage]);\n  const handlePageChange = useCallback(pageIndex => {\n    setCurrentPage(pageIndex);\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: pageIndex,\n        totalPages: Math.max(totalPages, pageIndex + 1)\n      });\n    }\n  }, [webrtcManager, totalPages]);\n  const addNewPage = useCallback(() => {\n    const newPageIndex = totalPages;\n    setTotalPages(prev => prev + 1);\n    setDrawingData(prev => [...prev, []]);\n    setCurrentPage(newPageIndex);\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: newPageIndex,\n        totalPages: totalPages + 1\n      });\n    }\n  }, [webrtcManager, totalPages]);\n  const handleMouseDown = useCallback(e => {\n    if (currentTool !== 'pen') return;\n\n    // Prevent stage dragging\n    e.target.getStage().draggable(false);\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    setCurrentPath([pos.x, pos.y]);\n  }, [currentTool]);\n  const handleMouseMove = useCallback(e => {\n    var _e$evt;\n    if (!isDrawing || currentTool !== 'pen') return;\n\n    // Prevent default touch behaviors\n    (_e$evt = e.evt) === null || _e$evt === void 0 ? void 0 : _e$evt.preventDefault();\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n\n    // Capture all points for high fidelity (especially important for cursive/small writing)\n    const newPath = [...currentPath, point.x, point.y];\n    setCurrentPath(newPath);\n\n    // Send live preview to remote user\n    if (webrtcManager && newPath.length >= 4) {\n      // Send every few points to avoid spam\n      webrtcManager.sendData({\n        type: 'live-drawing',\n        points: newPath,\n        color: currentColor,\n        strokeWidth: strokeWidth,\n        strokeId: `live-${Date.now()}`,\n        page: currentPage\n      });\n    }\n  }, [isDrawing, currentTool, currentPath, webrtcManager, currentColor, strokeWidth, currentPage]);\n  const handleMouseUp = useCallback(e => {\n    var _e$evt2;\n    if (!isDrawing || currentTool !== 'pen') {\n      setIsDrawing(false);\n      setCurrentPath([]);\n      return;\n    }\n\n    // Prevent default touch behaviors\n    (_e$evt2 = e.evt) === null || _e$evt2 === void 0 ? void 0 : _e$evt2.preventDefault();\n\n    // Allow shorter strokes for small text and dots\n    if (currentPath.length >= 2) {\n      const newStroke = {\n        id: Date.now() + Math.random(),\n        points: currentPath,\n        color: currentColor,\n        strokeWidth: strokeWidth,\n        tool: currentTool,\n        timestamp: Date.now()\n      };\n      handleLocalDrawing(newStroke);\n    }\n    setIsDrawing(false);\n    setCurrentPath([]);\n  }, [isDrawing, currentTool, currentPath, currentColor, strokeWidth, handleLocalDrawing]);\n\n  // Combine drawing data with current drawing path\n  const currentPageData = drawingData[currentPage] || [];\n  const allLines = [...currentPageData, ...(isDrawing && currentPath.length >= 2 ? [{\n    id: 'current',\n    points: currentPath,\n    color: currentColor,\n    strokeWidth: strokeWidth,\n    tool: currentTool\n  }] : [])];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        currentTool: currentTool,\n        setCurrentTool: setCurrentTool,\n        currentColor: currentColor,\n        setCurrentColor: setCurrentColor,\n        strokeWidth: strokeWidth,\n        setStrokeWidth: setStrokeWidth,\n        onClear: handleClearPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard\",\n      style: {\n        flex: 1,\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stage, {\n        width: 1200,\n        height: 2400,\n        onMouseDown: handleMouseDown,\n        onMousemove: handleMouseMove,\n        onMouseup: handleMouseUp,\n        onTouchStart: handleMouseDown,\n        onTouchMove: handleMouseMove,\n        onTouchEnd: handleMouseUp,\n        onPointerDown: handleMouseDown,\n        onPointerMove: handleMouseMove,\n        onPointerUp: handleMouseUp,\n        ref: stageRef,\n        draggable: false,\n        style: {\n          border: '2px solid #ddd',\n          background: 'white',\n          cursor: currentTool === 'pen' ? 'crosshair' : 'default',\n          touchAction: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: allLines.map(line => /*#__PURE__*/_jsxDEV(Line, {\n            points: line.points,\n            stroke: line.color || '#000000',\n            strokeWidth: line.strokeWidth || 2,\n            tension: 0.2,\n            lineCap: \"round\",\n            lineJoin: \"round\",\n            globalCompositeOperation: \"source-over\",\n            perfectDrawEnabled: false,\n            shadowForStrokeEnabled: false\n          }, line.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"A7eYxiEJ4WEia/QR/Lpy0rvBv1Y=\");\n_c = Whiteboard;\nexport default Whiteboard;\nvar _c;\n$RefreshReg$(_c, \"Whiteboard\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","Layer","Line","Stage","Toolbar","jsxDEV","_jsxDEV","Whiteboard","webrtcManager","_s","currentTool","setCurrentTool","currentColor","setCurrentColor","strokeWidth","setStrokeWidth","currentPage","setCurrentPage","totalPages","setTotalPages","drawingData","setDrawingData","isDrawing","setIsDrawing","currentPath","setCurrentPath","liveStrokes","setLiveStrokes","Map","stageRef","handleRemoteDrawing","data","type","prev","newData","length","page","push","stroke","Math","max","onDataReceived","handleLocalDrawing","sendData","handleClearPage","handlePageChange","pageIndex","addNewPage","newPageIndex","handleMouseDown","e","target","getStage","draggable","pos","getPointerPosition","x","y","handleMouseMove","_e$evt","evt","preventDefault","stage","point","newPath","points","color","strokeId","Date","now","handleMouseUp","_e$evt2","newStroke","id","random","tool","timestamp","currentPageData","allLines","className","children","onClear","fileName","_jsxFileName","lineNumber","columnNumber","style","flex","overflow","width","height","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerMove","onPointerUp","ref","border","background","cursor","touchAction","map","line","tension","lineCap","lineJoin","globalCompositeOperation","perfectDrawEnabled","shadowForStrokeEnabled","_c","$RefreshReg$"],"sources":["C:/Users/eniac/Desktop/wrtc/src/components/Whiteboard.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Layer, Line, Stage } from 'react-konva';\nimport Toolbar from './Toolbar';\n// import PageManager from './PageManager';\n\nconst Whiteboard = ({ webrtcManager }) => {\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [strokeWidth, setStrokeWidth] = useState(2);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [drawingData, setDrawingData] = useState([[]]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n  const [liveStrokes, setLiveStrokes] = useState(new Map()); // Track live strokes from remote users\n  const stageRef = useRef();\n\n  const handleRemoteDrawing = useCallback((data) => {\n    if (data.type === 'drawing') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        while (newData.length <= data.page) {\n          newData.push([]);\n        }\n        newData[data.page] = [...newData[data.page], data.stroke];\n        return newData;\n      });\n    } else if (data.type === 'clear') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        if (newData[data.page]) {\n          newData[data.page] = [];\n        }\n        return newData;\n      });\n    } else if (data.type === 'pageChange') {\n      setTotalPages(prev => Math.max(prev, data.totalPages));\n    }\n  }, []);\n\n  // Set up WebRTC data handling\n  useEffect(() => {\n    if (webrtcManager) {\n      webrtcManager.onDataReceived = handleRemoteDrawing;\n    }\n  }, [webrtcManager, handleRemoteDrawing]);\n\n  const handleLocalDrawing = useCallback((stroke) => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'drawing',\n        stroke: stroke,\n        page: currentPage\n      });\n    }\n    \n    setDrawingData(prev => {\n      const newData = [...prev];\n      while (newData.length <= currentPage) {\n        newData.push([]);\n      }\n      newData[currentPage] = [...newData[currentPage], stroke];\n      return newData;\n    });\n  }, [webrtcManager, currentPage]);\n\n  const handleClearPage = useCallback(() => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'clear',\n        page: currentPage\n      });\n    }\n    \n    setDrawingData(prev => {\n      const newData = [...prev];\n      if (newData[currentPage]) {\n        newData[currentPage] = [];\n      }\n      return newData;\n    });\n  }, [webrtcManager, currentPage]);\n\n  const handlePageChange = useCallback((pageIndex) => {\n    setCurrentPage(pageIndex);\n    \n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: pageIndex,\n        totalPages: Math.max(totalPages, pageIndex + 1)\n      });\n    }\n  }, [webrtcManager, totalPages]);\n\n  const addNewPage = useCallback(() => {\n    const newPageIndex = totalPages;\n    setTotalPages(prev => prev + 1);\n    setDrawingData(prev => [...prev, []]);\n    setCurrentPage(newPageIndex);\n    \n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: newPageIndex,\n        totalPages: totalPages + 1\n      });\n    }\n  }, [webrtcManager, totalPages]);\n\n  const handleMouseDown = useCallback((e) => {\n    if (currentTool !== 'pen') return;\n    \n    // Prevent stage dragging\n    e.target.getStage().draggable(false);\n    \n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    setCurrentPath([pos.x, pos.y]);\n  }, [currentTool]);\n\n  const handleMouseMove = useCallback((e) => {\n    if (!isDrawing || currentTool !== 'pen') return;\n\n    // Prevent default touch behaviors\n    e.evt?.preventDefault();\n    \n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    \n    // Capture all points for high fidelity (especially important for cursive/small writing)\n    const newPath = [...currentPath, point.x, point.y];\n    setCurrentPath(newPath);\n\n    // Send live preview to remote user\n    if (webrtcManager && newPath.length >= 4) { // Send every few points to avoid spam\n      webrtcManager.sendData({\n        type: 'live-drawing',\n        points: newPath,\n        color: currentColor,\n        strokeWidth: strokeWidth,\n        strokeId: `live-${Date.now()}`,\n        page: currentPage\n      });\n    }\n  }, [isDrawing, currentTool, currentPath, webrtcManager, currentColor, strokeWidth, currentPage]);\n\n  const handleMouseUp = useCallback((e) => {\n    if (!isDrawing || currentTool !== 'pen') {\n      setIsDrawing(false);\n      setCurrentPath([]);\n      return;\n    }\n\n    // Prevent default touch behaviors\n    e.evt?.preventDefault();\n\n    // Allow shorter strokes for small text and dots\n    if (currentPath.length >= 2) {\n      const newStroke = {\n        id: Date.now() + Math.random(),\n        points: currentPath,\n        color: currentColor,\n        strokeWidth: strokeWidth,\n        tool: currentTool,\n        timestamp: Date.now()\n      };\n\n      handleLocalDrawing(newStroke);\n    }\n    \n    setIsDrawing(false);\n    setCurrentPath([]);\n  }, [isDrawing, currentTool, currentPath, currentColor, strokeWidth, handleLocalDrawing]);\n\n  // Combine drawing data with current drawing path\n  const currentPageData = drawingData[currentPage] || [];\n  const allLines = [\n    ...currentPageData,\n    ...(isDrawing && currentPath.length >= 2 ? [{\n      id: 'current',\n      points: currentPath,\n      color: currentColor,\n      strokeWidth: strokeWidth,\n      tool: currentTool\n    }] : [])\n  ];\n\n  return (\n    <div className=\"whiteboard-container\">\n      <div className=\"controls\">\n        <Toolbar\n          currentTool={currentTool}\n          setCurrentTool={setCurrentTool}\n          currentColor={currentColor}\n          setCurrentColor={setCurrentColor}\n          strokeWidth={strokeWidth}\n          setStrokeWidth={setStrokeWidth}\n          onClear={handleClearPage}\n        />\n        {/* <PageManager\n          currentPage={currentPage}\n          totalPages={totalPages}\n          onPageChange={handlePageChange}\n          onAddPage={addNewPage}\n        /> */}\n      </div>\n\n      <div className=\"whiteboard\" style={{ flex: 1, overflow: 'hidden' }}>\n        <Stage\n          width={1200}\n          height={2400}\n          onMouseDown={handleMouseDown}\n          onMousemove={handleMouseMove}\n          onMouseup={handleMouseUp}\n          onTouchStart={handleMouseDown}\n          onTouchMove={handleMouseMove}\n          onTouchEnd={handleMouseUp}\n          onPointerDown={handleMouseDown}\n          onPointerMove={handleMouseMove}\n          onPointerUp={handleMouseUp}\n          ref={stageRef}\n          draggable={false}\n          style={{ \n            border: '2px solid #ddd',\n            background: 'white',\n            cursor: currentTool === 'pen' ? 'crosshair' : 'default',\n            touchAction: 'none'\n          }}\n        >\n          <Layer>\n            {allLines.map((line) => (\n              <Line\n                key={line.id}\n                points={line.points}\n                stroke={line.color || '#000000'}\n                strokeWidth={line.strokeWidth || 2}\n                tension={0.2}\n                lineCap=\"round\"\n                lineJoin=\"round\"\n                globalCompositeOperation=\"source-over\"\n                perfectDrawEnabled={false}\n                shadowForStrokeEnabled={false}\n              />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}