{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eniac\\\\Desktop\\\\wrtc\\\\src\\\\components\\\\Whiteboard.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Layer, Line, Stage } from 'react-konva';\nimport PageManager from './PageManager';\nimport Toolbar from './Toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Whiteboard = ({\n  webrtcManager\n}) => {\n  _s();\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [strokeWidth, setStrokeWidth] = useState(2);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [drawingData, setDrawingData] = useState([[]]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n  const stageRef = useRef();\n\n  // Set up WebRTC data handling\n  useEffect(() => {\n    if (webrtcManager) {\n      webrtcManager.onDataReceived = data => {\n        handleRemoteDrawing(data);\n      };\n    }\n  }, [webrtcManager]);\n  const handleRemoteDrawing = data => {\n    if (data.type === 'drawing') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        while (newData.length <= data.page) {\n          newData.push([]);\n        }\n        newData[data.page] = [...newData[data.page], data.stroke];\n        return newData;\n      });\n    } else if (data.type === 'clear') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        if (newData[data.page]) {\n          newData[data.page] = [];\n        }\n        return newData;\n      });\n    } else if (data.type === 'pageChange') {\n      setTotalPages(Math.max(totalPages, data.totalPages));\n    }\n  };\n  const handleLocalDrawing = stroke => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'drawing',\n        stroke: stroke,\n        page: currentPage\n      });\n    }\n    setDrawingData(prev => {\n      const newData = [...prev];\n      while (newData.length <= currentPage) {\n        newData.push([]);\n      }\n      newData[currentPage] = [...newData[currentPage], stroke];\n      return newData;\n    });\n  };\n  const handleClearPage = () => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'clear',\n        page: currentPage\n      });\n    }\n    setDrawingData(prev => {\n      const newData = [...prev];\n      if (newData[currentPage]) {\n        newData[currentPage] = [];\n      }\n      return newData;\n    });\n  };\n  const handlePageChange = pageIndex => {\n    setCurrentPage(pageIndex);\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: pageIndex,\n        totalPages: Math.max(totalPages, pageIndex + 1)\n      });\n    }\n  };\n  const addNewPage = () => {\n    const newPageIndex = totalPages;\n    setTotalPages(prev => prev + 1);\n    setDrawingData(prev => [...prev, []]);\n    setCurrentPage(newPageIndex);\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: newPageIndex,\n        totalPages: totalPages + 1\n      });\n    }\n  };\n  const handleMouseDown = useCallback(e => {\n    if (currentTool !== 'pen') return;\n\n    // Prevent stage dragging\n    e.target.getStage().draggable(false);\n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    setCurrentPath([pos.x, pos.y]);\n  }, [currentTool]);\n  const handleMouseMove = useCallback(e => {\n    var _e$evt;\n    if (!isDrawing || currentTool !== 'pen') return;\n\n    // Prevent default touch behaviors\n    (_e$evt = e.evt) === null || _e$evt === void 0 ? void 0 : _e$evt.preventDefault();\n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n\n    // Capture all points for high fidelity (especially important for cursive/small writing)\n    setCurrentPath(prev => [...prev, point.x, point.y]);\n  }, [isDrawing, currentTool]);\n  const handleMouseUp = useCallback(e => {\n    var _e$evt2;\n    if (!isDrawing || currentTool !== 'pen') {\n      setIsDrawing(false);\n      setCurrentPath([]);\n      return;\n    }\n\n    // Prevent default touch behaviors\n    (_e$evt2 = e.evt) === null || _e$evt2 === void 0 ? void 0 : _e$evt2.preventDefault();\n\n    // Allow shorter strokes for small text and dots\n    if (currentPath.length >= 2) {\n      const newStroke = {\n        id: Date.now() + Math.random(),\n        points: currentPath,\n        color: currentColor,\n        strokeWidth: strokeWidth,\n        tool: currentTool,\n        timestamp: Date.now()\n      };\n      handleLocalDrawing(newStroke);\n    }\n    setIsDrawing(false);\n    setCurrentPath([]);\n  }, [isDrawing, currentTool, currentPath, currentColor, strokeWidth]);\n\n  // Combine drawing data with current drawing path\n  const currentPageData = drawingData[currentPage] || [];\n  const allLines = [...currentPageData, ...(isDrawing && currentPath.length >= 2 ? [{\n    id: 'current',\n    points: currentPath,\n    color: currentColor,\n    strokeWidth: strokeWidth,\n    tool: currentTool\n  }] : [])];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whiteboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n        currentTool: currentTool,\n        setCurrentTool: setCurrentTool,\n        currentColor: currentColor,\n        setCurrentColor: setCurrentColor,\n        strokeWidth: strokeWidth,\n        setStrokeWidth: setStrokeWidth,\n        onClear: handleClearPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PageManager, {\n        currentPage: currentPage,\n        totalPages: totalPages,\n        onPageChange: handlePageChange,\n        onAddPage: addNewPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"whiteboard\",\n      style: {\n        flex: 1,\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(Stage, {\n        width: 1200,\n        height: 2400,\n        onMouseDown: handleMouseDown,\n        onMousemove: handleMouseMove,\n        onMouseup: handleMouseUp,\n        onTouchStart: handleMouseDown,\n        onTouchMove: handleMouseMove,\n        onTouchEnd: handleMouseUp,\n        onPointerDown: handleMouseDown,\n        onPointerMove: handleMouseMove,\n        onPointerUp: handleMouseUp,\n        ref: stageRef,\n        draggable: false,\n        style: {\n          border: '2px solid #ddd',\n          background: 'white',\n          cursor: currentTool === 'pen' ? 'crosshair' : 'default',\n          touchAction: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Layer, {\n          children: allLines.map(line => /*#__PURE__*/_jsxDEV(Line, {\n            points: line.points,\n            stroke: line.color || '#000000',\n            strokeWidth: line.strokeWidth || 2,\n            tension: 0.2,\n            lineCap: \"round\",\n            lineJoin: \"round\",\n            globalCompositeOperation: \"source-over\",\n            perfectDrawEnabled: false,\n            shadowForStrokeEnabled: false\n          }, line.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(Whiteboard, \"NSqSgyPu+NxY2LRep6k6TrCKlWU=\");\n_c = Whiteboard;\nexport default Whiteboard;\nvar _c;\n$RefreshReg$(_c, \"Whiteboard\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","Layer","Line","Stage","PageManager","Toolbar","jsxDEV","_jsxDEV","Whiteboard","webrtcManager","_s","currentTool","setCurrentTool","currentColor","setCurrentColor","strokeWidth","setStrokeWidth","currentPage","setCurrentPage","totalPages","setTotalPages","drawingData","setDrawingData","isDrawing","setIsDrawing","currentPath","setCurrentPath","stageRef","onDataReceived","data","handleRemoteDrawing","type","prev","newData","length","page","push","stroke","Math","max","handleLocalDrawing","sendData","handleClearPage","handlePageChange","pageIndex","addNewPage","newPageIndex","handleMouseDown","e","target","getStage","draggable","pos","getPointerPosition","x","y","handleMouseMove","_e$evt","evt","preventDefault","stage","point","handleMouseUp","_e$evt2","newStroke","id","Date","now","random","points","color","tool","timestamp","currentPageData","allLines","className","children","onClear","fileName","_jsxFileName","lineNumber","columnNumber","onPageChange","onAddPage","style","flex","overflow","width","height","onMouseDown","onMousemove","onMouseup","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerMove","onPointerUp","ref","border","background","cursor","touchAction","map","line","tension","lineCap","lineJoin","globalCompositeOperation","perfectDrawEnabled","shadowForStrokeEnabled","_c","$RefreshReg$"],"sources":["C:/Users/eniac/Desktop/wrtc/src/components/Whiteboard.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Layer, Line, Stage } from 'react-konva';\nimport PageManager from './PageManager';\nimport Toolbar from './Toolbar';\n\nconst Whiteboard = ({ webrtcManager }) => {\n  const [currentTool, setCurrentTool] = useState('pen');\n  const [currentColor, setCurrentColor] = useState('#000000');\n  const [strokeWidth, setStrokeWidth] = useState(2);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n  const [drawingData, setDrawingData] = useState([[]]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [currentPath, setCurrentPath] = useState([]);\n  const stageRef = useRef();\n\n  // Set up WebRTC data handling\n  useEffect(() => {\n    if (webrtcManager) {\n      webrtcManager.onDataReceived = (data) => {\n        handleRemoteDrawing(data);\n      };\n    }\n  }, [webrtcManager]);\n\n  const handleRemoteDrawing = (data) => {\n    if (data.type === 'drawing') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        while (newData.length <= data.page) {\n          newData.push([]);\n        }\n        newData[data.page] = [...newData[data.page], data.stroke];\n        return newData;\n      });\n    } else if (data.type === 'clear') {\n      setDrawingData(prev => {\n        const newData = [...prev];\n        if (newData[data.page]) {\n          newData[data.page] = [];\n        }\n        return newData;\n      });\n    } else if (data.type === 'pageChange') {\n      setTotalPages(Math.max(totalPages, data.totalPages));\n    }\n  };\n\n  const handleLocalDrawing = (stroke) => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'drawing',\n        stroke: stroke,\n        page: currentPage\n      });\n    }\n    \n    setDrawingData(prev => {\n      const newData = [...prev];\n      while (newData.length <= currentPage) {\n        newData.push([]);\n      }\n      newData[currentPage] = [...newData[currentPage], stroke];\n      return newData;\n    });\n  };\n\n  const handleClearPage = () => {\n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'clear',\n        page: currentPage\n      });\n    }\n    \n    setDrawingData(prev => {\n      const newData = [...prev];\n      if (newData[currentPage]) {\n        newData[currentPage] = [];\n      }\n      return newData;\n    });\n  };\n\n  const handlePageChange = (pageIndex) => {\n    setCurrentPage(pageIndex);\n    \n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: pageIndex,\n        totalPages: Math.max(totalPages, pageIndex + 1)\n      });\n    }\n  };\n\n  const addNewPage = () => {\n    const newPageIndex = totalPages;\n    setTotalPages(prev => prev + 1);\n    setDrawingData(prev => [...prev, []]);\n    setCurrentPage(newPageIndex);\n    \n    if (webrtcManager) {\n      webrtcManager.sendData({\n        type: 'pageChange',\n        page: newPageIndex,\n        totalPages: totalPages + 1\n      });\n    }\n  };\n\n  const handleMouseDown = useCallback((e) => {\n    if (currentTool !== 'pen') return;\n    \n    // Prevent stage dragging\n    e.target.getStage().draggable(false);\n    \n    setIsDrawing(true);\n    const pos = e.target.getStage().getPointerPosition();\n    setCurrentPath([pos.x, pos.y]);\n  }, [currentTool]);\n\n  const handleMouseMove = useCallback((e) => {\n    if (!isDrawing || currentTool !== 'pen') return;\n\n    // Prevent default touch behaviors\n    e.evt?.preventDefault();\n    \n    const stage = e.target.getStage();\n    const point = stage.getPointerPosition();\n    \n    // Capture all points for high fidelity (especially important for cursive/small writing)\n    setCurrentPath(prev => [...prev, point.x, point.y]);\n  }, [isDrawing, currentTool]);\n\n  const handleMouseUp = useCallback((e) => {\n    if (!isDrawing || currentTool !== 'pen') {\n      setIsDrawing(false);\n      setCurrentPath([]);\n      return;\n    }\n\n    // Prevent default touch behaviors\n    e.evt?.preventDefault();\n\n    // Allow shorter strokes for small text and dots\n    if (currentPath.length >= 2) {\n      const newStroke = {\n        id: Date.now() + Math.random(),\n        points: currentPath,\n        color: currentColor,\n        strokeWidth: strokeWidth,\n        tool: currentTool,\n        timestamp: Date.now()\n      };\n\n      handleLocalDrawing(newStroke);\n    }\n    \n    setIsDrawing(false);\n    setCurrentPath([]);\n  }, [isDrawing, currentTool, currentPath, currentColor, strokeWidth]);\n\n  // Combine drawing data with current drawing path\n  const currentPageData = drawingData[currentPage] || [];\n  const allLines = [\n    ...currentPageData,\n    ...(isDrawing && currentPath.length >= 2 ? [{\n      id: 'current',\n      points: currentPath,\n      color: currentColor,\n      strokeWidth: strokeWidth,\n      tool: currentTool\n    }] : [])\n  ];\n\n  return (\n    <div className=\"whiteboard-container\">\n      <div className=\"controls\">\n        <Toolbar\n          currentTool={currentTool}\n          setCurrentTool={setCurrentTool}\n          currentColor={currentColor}\n          setCurrentColor={setCurrentColor}\n          strokeWidth={strokeWidth}\n          setStrokeWidth={setStrokeWidth}\n          onClear={handleClearPage}\n        />\n        <PageManager\n          currentPage={currentPage}\n          totalPages={totalPages}\n          onPageChange={handlePageChange}\n          onAddPage={addNewPage}\n        />\n      </div>\n\n      <div className=\"whiteboard\" style={{ flex: 1, overflow: 'hidden' }}>\n        <Stage\n          width={1200}\n          height={2400}\n          onMouseDown={handleMouseDown}\n          onMousemove={handleMouseMove}\n          onMouseup={handleMouseUp}\n          onTouchStart={handleMouseDown}\n          onTouchMove={handleMouseMove}\n          onTouchEnd={handleMouseUp}\n          onPointerDown={handleMouseDown}\n          onPointerMove={handleMouseMove}\n          onPointerUp={handleMouseUp}\n          ref={stageRef}\n          draggable={false}\n          style={{ \n            border: '2px solid #ddd',\n            background: 'white',\n            cursor: currentTool === 'pen' ? 'crosshair' : 'default',\n            touchAction: 'none'\n          }}\n        >\n          <Layer>\n            {allLines.map((line) => (\n              <Line\n                key={line.id}\n                points={line.points}\n                stroke={line.color || '#000000'}\n                strokeWidth={line.strokeWidth || 2}\n                tension={0.2}\n                lineCap=\"round\"\n                lineJoin=\"round\"\n                globalCompositeOperation=\"source-over\"\n                perfectDrawEnabled={false}\n                shadowForStrokeEnabled={false}\n              />\n            ))}\n          </Layer>\n        </Stage>\n      </div>\n    </div>\n  );\n};\n\nexport default Whiteboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}